      SUBROUTINE SJ2(C20S,XSATR,DXDDR,NEQN,PXDDOT,MJDSEC,FSEC,AA,II)
!********1*********2*********3*********4*********5*********6*********7**
!  C20S  - SOLAR C20 NORMALIZED
!  THE GM OF THE SUN IS LOADRD IN THE CODE INTO GMS
!********1*********2*********3*********4*********5*********6*********7**
      IMPLICIT DOUBLE PRECISION (A-H,O-Z),LOGICAL(L)
      SAVE
      DIMENSION XSATR(3),DXDDR(3),TMPARTLGM(3)
      DIMENSION SCR(3),FSECS(1),PXDDOT(NEQN,3),AA(1),II(1)
      DIMENSION VMERC(3),VSAT(3),DXDDRJ2(3),PXDDJ2(3), DXDDRGM(3)
      COMMON/CBDTRU/BDTRUE(7,999)

      COMMON/NPCOM /NPNAME,NPVAL(92),NPVAL0(92),IPVAL(92),IPVAL0(92),   &
     &              MPVAL(28),MPVAL0(28),NXNPCM

      COMMON/NPCOMX/IXARC ,IXSATP,IXDRAG,IXSLRD,IXACCL,IXGPCA,IXGPSA,   &
     &              IXAREA,IXSPRF,IXDFRF,IXEMIS,IXTMPA,IXTMPC,IXTIMD,   &
     &              IXTIMF,IXTHTX,IXTHDR,IXOFFS,IXBISA,IXFAGM,IXFAFM,   &
     &              IXATUD,IXRSEP,IXACCB,IXDXYZ,IXGPSBW,IXCAME,IXBURN,  &
     &              IXGLBL,IXGPC ,IXGPS, IXTGPC,IXTGPS,IXGPCT,IXGPST,   &
     &              IXTIDE,IXETDE,IXOTDE,IXOTPC,IXOTPS,IXLOCG,IXKF  ,   &
     &              IXGM  ,IXSMA ,IXFLTP,IXFLTE,IXPLTP,IXPLTV,IXPMGM,   &
     &              IXPMJ2,IXVLIT,IXEPHC,IXEPHT,IXH2LV,IXL2LV,IXOLOD,   &
     &              IXPOLX,IXPOLY,IXUT1 ,IXPXDT,IXPYDT,IXUTDT,IXVLBI,   &
     &              IXVLBV,IXXTRO,IXBISG,IXSSTF,IXFGGM,IXFGFM,IXLNTM,   &
     &              IXLNTA,IX2CCO,IX2SCO,IX2GM ,IX2BDA,IXRELP,IXJ2SN,   &
     &              IXGMSN,IXPLNF,IXPSRF,IXANTD,IXTARG,                 &
     &              IXSTAP,IXSSTC,IXSSTS,IXSTAV,IXSTL2,                 &
     &              IXSTH2,IXDPSI,IXEPST,IXCOFF,IXTOTL,NXNPCX

      COMMON/CITERL/LSTGLB,LSTARC,LSTINR,LNADJ ,LITER1,LSTITR,          &
     &              LOBORB,LRESID,LFREEZ,LSAVEF,LHALT,LADJPI,LADJCI
      COMMON/SUNJ2 /DXDDRJ2,PXDDJ2,SVXDDSN(3)

!
! START OF EXECUTABLE CODE *********************************************
!***********************************************************************
!
! CHECK TO SEE IF GM AND J2 OF SUN ARE ADJUSTING
      LADJ=.TRUE.
      IF(.NOT.LSTINR) LADJ=.FALSE.
!     IF(NPVAL0(IXFGFM).LE.1) LADJ=.FALSE.
      IF(NPVAL0(IXJ2SN).LE.1) LADJ=.FALSE.
!     IF(NPVAL(IXFGFM).LE.1) RETURN
      IF(NPVAL(IXJ2SN).LE.1) RETURN
!
!     IF(LADJ) PUT FORCE MODEL PARTIAL OF SJ2 IN THE NEQN SLOT
!
! GET TRUE OF REF VECTOR FROM SUN TO MERCURY
      RS=696000000.D0
      GMS=BDTRUE(4,8)
      VMERC(1)=-BDTRUE(1,8)
      VMERC(2)=-BDTRUE(2,8)
      VMERC(3)=-BDTRUE(3,8)
      FSECS(1)=FSEC
      CALL SATUPD(MJDSEC,FSECS,VMERC,VMERC,AA,1,1,.TRUE.,.TRUE.,II,0)
! GET TRUE OF REF VECTOR FROM SUN TO SAT
      VSAT(1)=XSATR(1)+VMERC(1)
      VSAT(2)=XSATR(2)+VMERC(2)
      VSAT(3)=XSATR(3)+VMERC(3)

! CONVERT VMERC ABD VSAT TO SOLAR 2000
      CALL TR2S20(.TRUE.,VMERC)
      CALL TR2S20(.TRUE.,VSAT)
!
! WITH VMERC AND VSAT ANTONIO COMPUTES THE ACCELETATION
! OF THE SATELLITE DUE TO SOLAR J2 AND ALSO THE ACCELETATION
! OF MERCURY DUE TO SOLAR J2 AND THEN FORMS DIFFERENCE OF
! SAT ACC - MERC ACC AND LOADS INTO DXDDR THIS IS IN SOLAR 2000
!
! NOTE ANTONIO SHOULD MAKE DXDDR COMPUTATION AS IF C20S=1.D0
!
! INSERT CODE HERE!
!

      VMERC_NORM=NORM2(VMERC)
      VSAT_NORM=NORM2(VSAT)

      COLAT_MERC=ATAN2(SQRT(VMERC(1)**2.D0+VMERC(2)**2.D0),VMERC(3))
      COLAT_SAT=ATAN2(SQRT(VSAT(1)**2.D0+VSAT(2)**2.D0),VSAT(3))

      P20_MERC=(3.D0*COS(COLAT_MERC)**2.D0-1.D0)/2.D0
      P20_SAT=(3.D0*COS(COLAT_SAT)**2.D0-1.D0)/2.D0

      CONST=3.D0/(2.D0)*GMS*RS**2.D0

! J2 Partial derivatives for direct perturbation on Mercury and third body pertu

      PXDDJ2(1)=CONST/(VMERC_NORM**5.D0)*(VMERC(1)*                     &
     &         (5.D0*VMERC(3)**2.D0/VMERC_NORM**2.D0-1.D0))
      PXDDJ2(2)=CONST/(VMERC_NORM**5.D0)*(VMERC(2)*                     &
     &         (5.D0*VMERC(3)**2.D0/VMERC_NORM**2.D0-1.D0))
      PXDDJ2(3)=CONST/(VMERC_NORM**5.D0)*(VMERC(3)*                     &
     &         (5.D0*VMERC(3)**2.D0/VMERC_NORM**2.D0-3.D0))

!      RSAT2=VMERC(1)**2 + VMERC(2)**2 + VMERC(3)**2
!      RSAT=SQRT(RSAT2)
!      RSAT3=RSAT2*RSAT
!      RXYSQ=RSAT2 - VMERC(3)**2
!      RXY=SQRT(RXYSQ)
!      RSAT4=RSAT2*RSAT2
!!
!! ..EVALUATE PARTIALS TO TRANSFORM FROM R,PSI,LAMDA TO TRUE OF DATE XYZ
!!
!      SINPSI=VMERC(3)/RSAT
!      COSPSI=RXY/RSAT
!! ...PARTIALS OF R WRT X Y AND Z
!      PRWRTX=VMERC(1)/RSAT
!      PRWRTY=VMERC(2)/RSAT
!      PRWRTZ=SINPSI
!! ...PARTIALS OF PSI WRT X Y AND Z (REFER TO PAGE 109 OF VOLUME 1)
!      PPWRTX=-(VMERC(3)*VMERC(1))/(RXY*RSAT2)
!      PPWRTY=-(VMERC(3)*VMERC(2))/(RXY*RSAT2)
!      PPWRTZ=RXY/RSAT2
!! ..EVALUATE DIRECT J2 ACCELERATION IN R AND PSI
!      CONS=GMS*RS*RS
!! ...ACCELERATION IS GRADIENT OF POTENTIAL WRT R AND PSI
!! ....PARTIAL OF THE POTENTIAL WRT R AND PSI IS:
!      PPWRTR=(1.5d0*CONS*(3.d0*SINPSI*SINPSI - 1.d0))/RSAT4
!      PPWRTP=-3.d0*CONS*SINPSI*COSPSI/RSAT3
!! ..TRANSFORM ACCELERATION TO TRUE OF DATE XYZ EARTH EQUATOR AND EQ.
!! ...THE ACCELERATION ON THE LUNAR ORBITER IS EQUAL AND OPPOSITE TO
!! ...TO THE ACCELERATION ON THE MOON SO ADD IN THE NEGATIVE OF THE
!! ...ACCELERATION ON THE MOON
!      PXDDJ2(1) = (PPWRTR*PRWRTX + PPWRTP*PPWRTX)
!      PXDDJ2(2) = (PPWRTR*PRWRTY + PPWRTP*PPWRTY)
!      PXDDJ2(3) = (PPWRTR*PRWRTZ + PPWRTP*PPWRTZ)

!      print*, "LUN",PXDDJ2*C20S

      DXDDR(1)=CONST/(VSAT_NORM**5.D0)*(VSAT(1)*                        &
     &         (5.D0*VSAT(3)**2.D0/VSAT_NORM**2.D0-1.D0))-PXDDJ2(1)
      DXDDR(2)=CONST/(VSAT_NORM**5.D0)*(VSAT(2)*                        &
     &         (5.D0*VSAT(3)**2.D0/VSAT_NORM**2.D0-1.D0))-PXDDJ2(2)
      DXDDR(3)=CONST/(VSAT_NORM**5.D0)*(VSAT(3)*                        &
     &         (5.D0*VSAT(3)**2.D0/VSAT_NORM**2.D0-3.D0))-PXDDJ2(3)

! GM Partial derivatives third body perturbation on MESSENGER

      DXDDRGM(1)=-( VSAT(1)/VSAT_NORM**3.D0 - VMERC(1)/VMERC_NORM**3.D0)
      DXDDRGM(2)=-( VSAT(2)/VSAT_NORM**3.D0 - VMERC(2)/VMERC_NORM**3.D0)
      DXDDRGM(3)=-( VSAT(3)/VSAT_NORM**3.D0 - VMERC(3)/VMERC_NORM**3.D0)

      CALL TR2S20(.FALSE.,DXDDRGM)

!      write(*,*)"GM FROM SJ2",DXDDRGM

! CONVERT DXDDR TO TRUE OF REF
      CALL TR2S20(.FALSE.,DXDDR)
      CALL TR2S20(.FALSE.,PXDDJ2)
!
      IF(LADJ) THEN
!        PXDDOT(NEQN-3,1)=DXDDRGM(1)
!        PXDDOT(NEQN-3,2)=DXDDRGM(2)
!        PXDDOT(NEQN-3,3)=DXDDRGM(3)

!       PXDDOT(NEQN-2,1)=DXDDR(1)
!       PXDDOT(NEQN-2,2)=DXDDR(2)
!       PXDDOT(NEQN-2,3)=DXDDR(3)

        PXDDOT(NEQN-1,1)=DXDDR(1)
        PXDDOT(NEQN-1,2)=DXDDR(2)
        PXDDOT(NEQN-1,3)=DXDDR(3)
      ENDIF

!!      WRITE(6,87652) DXDDRGM(1:3)
!!87652    FORMAT("GM PARTL. SJ2 ",3D25.18)

!
!     J2 acceleration on MESSENGER

      DXDDR(1)=DXDDR(1)*C20S
      DXDDR(2)=DXDDR(2)*C20S
      DXDDR(3)=DXDDR(3)*C20S

!     J2 acceleration on Mercury

      DXDDRJ2(1)=PXDDJ2(1)*C20S
      DXDDRJ2(2)=PXDDJ2(2)*C20S
      DXDDRJ2(3)=PXDDJ2(3)*C20S

!      WRITE(6,87652) DXDDRJ2(1:3)
!87652    FORMAT("J2 ACCEL. ",3D25.18)

      RETURN
      END
