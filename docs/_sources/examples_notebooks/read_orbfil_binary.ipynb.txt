{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9cfbafcb",
   "metadata": {},
   "source": [
    "# Reading the Binary Orbit File\n",
    "\n",
    "The trajectory file (called G2T in the GII docs) is an unformatted fortran binary file that is fully described in Vol 5 Section 5.1 of the GII documentation.\n",
    "\n",
    "The file consists of 4 types of buffers (records):  \n",
    "  - `header`: provides information concerning the contents of the remaining buffer\n",
    "  - `alphanumeric`: contains info about the file contents and the iisset control deck\n",
    "  - `data`: contains the orbit/ trajectory information for the satellites present in the GEODYN run\n",
    "  - `sentinel`: the final record that designates the end of file and contains some info on the GOEDYN version\n",
    "  \n",
    "  \n",
    "  \n",
    "We read the file using the the `scipy.io.FortranFile` package.  This allows us to read in the proper amount of words per record, as long as we provide it with the correct data type.\n",
    "\n",
    "We determine which `words` (index in each record) and contain which values by referring to the documentation.\n",
    "\n",
    "**Note 1**:    Ephemeris Time\n",
    "  - The time system output of the Modified Julian Day Seconds (`MJDS`) is listed as `ET` instead of UTC.  ET is Ephemeris Time and has been numerically equivalent to Terrestral Time (`TT`) or Terrestral Dynamic Time (`TDT`) since mid 1970’s.\n",
    "  - `TT` is distinct from the time scale often used as a basis for civil purposes, Coordinated Universal Time (`UTC`). `TT` is indirectly the basis of `UTC`, via International Atomic Time (`TAI`). Because of the historical difference between `TAI` and `ET` when `TT` was introduced, `TT` is approximately 32.184 s ahead of `TAI`.\n",
    "  - $ ET - A1 = 32.1496183$\n",
    "  - $TDT = TAI + 32.184  $\n",
    "  - $TAI = UTC + \\delta AT $ \n",
    "  - $\\delta AT$ is the total algebraic sum of leap seconds \n",
    "  \n",
    "  \n",
    "```\n",
    "As of 1 January 2017,\n",
    "        TAI is ahead of UTC   by 37 seconds.\n",
    "        TAI is ahead of GPS   by 19 seconds.\n",
    "        GPS is ahead of UTC   by 18 seconds.\n",
    "```  \n",
    " \n",
    "  \n",
    "  \n",
    " - Convert ET to UTC:\n",
    " \n",
    "$$UTC  =  TT - dAT - 32.184 s  $$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "671b9e6a",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-27T20:24:11.275287Z",
     "start_time": "2021-05-27T20:24:11.272045Z"
    }
   },
   "outputs": [],
   "source": [
    "# dAT =  37\n",
    "\n",
    "# UTC  =  TT - dAT - 32.184 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "01ade181",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-27T20:24:11.280685Z",
     "start_time": "2021-05-27T20:24:11.276809Z"
    }
   },
   "outputs": [],
   "source": [
    "orb_fil = '/data/data_geodyn/results/icesat2/msis2/msis2_acceloff_TrajAnalysis/ORBITS/icesat2_2018314_54hr.msis2_orb1'\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ef284d1e",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-27T20:24:11.293033Z",
     "start_time": "2021-05-27T20:24:11.282405Z"
    }
   },
   "outputs": [],
   "source": [
    "def MJDS_to_YYMMDDHHMMSS(input_ModJulianDay_secs):\n",
    "    '''\n",
    "    This function takes modified julian day seconds (MJDS) as input \n",
    "    and returns a date_string in the format YYMMDDHHMMSS.\n",
    "    '''\n",
    "    \n",
    "    #########################################\n",
    "    # Define some constants\n",
    "    SECDAY              = 86400\n",
    "    geodyn_ref_time_mjd = 30000\n",
    "    jd_0                = 2400000.5\n",
    "    d36525              = 365.25\n",
    "    d122                = 122.1\n",
    "    d30600              = 30.6001\n",
    "    half                = 0.5\n",
    "    ib                  = -15\n",
    "    d17209              = 1720996.5\n",
    "\n",
    "    ######  CONVERT FROM MJDS TO MJD\n",
    "    # Inputs:\n",
    "    MJDS = input_ModJulianDay_secs\n",
    "    #\n",
    "    MJD = (MJDS/SECDAY) + geodyn_ref_time_mjd\n",
    "\n",
    "    ######  CONVERT FROM MJD TO YMD\n",
    "    # Note from zach-- I took this calculation from geodyn...\n",
    "    # There is more going on here than I understand, \n",
    "    # but I want to stay on their level of accuracy\n",
    "    #\n",
    "    JD = MJD + jd_0                  #  Convert to JulianDay\n",
    "    c  = int( JD + half ) + 1537     # ??   sorry, i'm   ??\n",
    "    nd = int( (c - d122) / d36525 )  # ??   not sure     ??\n",
    "    e  = int( d36525 * nd )          # ??   what this    ??\n",
    "    nf = int( ( c - e ) / d30600 )   # ??   all is       ??\n",
    "    # ----\n",
    "    frac = (JD + half) - int( JD + half )           # frac of day leftover\n",
    "    iday = c - e - int( d30600 * nf ) + frac        # day\n",
    "    imonth  = nf -  1   - 12 * int( nf / 14 )       # month\n",
    "    iyyyy = nd - 4715 - int(  ( 7 + imonth ) / 10 ) # YYYY\n",
    "    #\n",
    "    ##### Use modular division to get 2 digit year\n",
    "    iyear =  iyyyy % 100 \n",
    "    #\n",
    "    #### Return YYMMDD \n",
    "    yymmdd = int(iyear * 10000 + imonth * 100 + iday)\n",
    "\n",
    "\n",
    "    ##### Calculate Hours, Minutes, seconds\n",
    "    isec_mjd  =  MJDS % 86400\n",
    "\n",
    "    ihour    = isec_mjd/3600\n",
    "    iminutes = (ihour % 1)*60\n",
    "    isec     = (iminutes % 1)*60 \n",
    "\n",
    "    ihour_str = str(int((ihour)))\n",
    "    iminutes_str  = str(int((iminutes)))\n",
    "    isec_str      = str(int(round(isec)))\n",
    "    \n",
    "    if len(ihour_str)==1:\n",
    "        ihour_str = '0'+ihour_str\n",
    "    if len(iminutes_str)==1:\n",
    "        iminutes_str = '0'+iminutes_str\n",
    "    if len(isec_str)==1:\n",
    "        isec_str = '0'+isec_str\n",
    "\n",
    "    #hhmmss  =  int((ihour*10000) + (iminutes*100) + isec)\n",
    "    hhmmss  =  ihour_str + iminutes_str + isec_str\n",
    "    YYMMDDHHMMSS = str(yymmdd) + '-' + str(hhmmss)\n",
    "    \n",
    "    \n",
    "    return(YYMMDDHHMMSS)\n",
    "\n",
    "   \n",
    "\n",
    "\n",
    "def Convert_ET_TDT_to_UTC(terrestrial_time_mjdsec, leap_seconds):\n",
    "    '''\n",
    "    ET is Ephemeris Time and has been numerically equivalent to \n",
    "    Terrestral Time (TT) or Terrestral Dynamic Time (TDT) since mid 1970’s.\n",
    "    \n",
    "    TT is distinct from the time scale often used as a \n",
    "        basis for civil purposes, Coordinated Universal Time (UTC).\n",
    "        TT is indirectly the basis of UTC, via \n",
    "        International Atomic Time (TAI). \n",
    "        Because of the historical difference between TAI and ET \n",
    "        when TT was introduced, TT is approximately 32.184 s\n",
    "        ahead of TAI.\n",
    "        \n",
    "        ??ET - A1 = 32.1496183??\n",
    "        \n",
    "        TDT = TAI + 32.184  \n",
    "        TAI = UTC + dAT  \n",
    "            where dAT is the total algebraic sum of leap seconds \n",
    "\n",
    "            As of 1 January 2017,\n",
    "            TAI is ahead of UTC   by 37 seconds.\n",
    "            TAI is ahead of GPS   by 19 seconds.\n",
    "            GPS is ahead of UTC   by 18 seconds.\n",
    "    \n",
    "    \n",
    "    Convert ET to UTC:\n",
    "        UTC  =  TT - dAT - 32.184 s  \n",
    "     '''\n",
    "    \n",
    "    \n",
    "    \n",
    "    TT  = terrestrial_time_mjdsec\n",
    "    dAT = leap_seconds\n",
    "    \n",
    "    UTC = TT - dAT - 32.184\n",
    "    mjdsecs_UTC = UTC\n",
    "    \n",
    "    return(mjdsecs_UTC)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e09d4508",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-27T20:24:20.160431Z",
     "start_time": "2021-05-27T20:24:11.295914Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----- End of file\n",
      "sentinel buffer indicator                        9000000000.0\n",
      "Count of the number of Data Buffers. GEODYN      414.0\n",
      "GEODYN II Interface File creation date and time. 20210521232530.0\n",
      "GEODYN II -S version used.                       1810.800048828125\n",
      "GEODYN II -E version used.                       1810.8\n",
      "spare                                            0.0\n",
      "spare                                            0.0\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy.io import FortranFile\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from collections import namedtuple\n",
    "import time\n",
    "# Fortran calls\n",
    "import subprocess\n",
    "import os\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "os.system('bunzip2 -v '+ orb_fil +'.bz2')\n",
    "\n",
    "f = FortranFile(orb_fil, 'r')\n",
    "\n",
    "#### -----------------------------------------------------\n",
    "#### ------------------- HEADER RECORD -------------------\n",
    "#### -----------------------------------------------------\n",
    "### Read the first record, this is the header buffer\n",
    "a = f.read_record(float)  # read the record with the required datatype\n",
    "\n",
    "\n",
    "#### Glean important variables\n",
    "NA     = int(a[2-1]) # Number of alphanumeric buffers to follow the header\n",
    "NC     = int(a[3-1]) # Number of card images in the GEODYN II input control deck\n",
    "NSATS  = int(a[7-1])  # Number of satellites on this file:  \n",
    "NWDSAT = int(a[8-1])  # Actual number of words per satellite per time point (NWDSAT <= 39).\n",
    "NWDATA = int(a[9-1])   #NSATS*NWDSAT\n",
    "NTIMBF = int(a[10-1]) # Number of time points per Data Buffer\n",
    "\n",
    "header= {}\n",
    "header['Number of alphanumeric data buffers to follow (NA)']             = a[2-1]\n",
    "header['Number of card images in the GEODYN II input control deck (NC)'] = a[3-1]\n",
    "header['Arc Number.']                                                    = a[4-1]\n",
    "header['Global Iteration Number']                                        = a[5-1]\n",
    "header['Inner Iteration Number']                                         = a[6-1]\n",
    "header['Number of satellites on this file']                              = a[7-1]  # upper limit of 50\n",
    "header['Actual number of words per satellite per time point']            = a[8-1]\n",
    "header['Number of words of data per time point (NWDATA=NSATS*NWDSAT)']   = a[9-1]\n",
    "header['Number of time points per Data Buffer (NTIMBF)']                 = a[10-1]\n",
    "header['Trajectory Start Date & Time in form YYMMDDHHMMSS .0D0 UTC']     = a[11-1]\n",
    "header['Fractional seconds of Start Time. UTC']                          = a[12-1]\n",
    "header['Trajectory Stop Date & Time in form YYMMDDHHMMSS .0D0 UTC']      = a[13-1]\n",
    "header['Fractional seconds of Stop Time. UTC']                           = a[14-1]\n",
    "header['Trajectory Start Date & Time in MJDS']                           = a[15-1] # (MJDS=(JD -2430000.5 D0 )*86400+ ISEC) ET\n",
    "header['Fractional seconds of Start Time']                               = a[16-1]\n",
    "header['Trajectory Stop Date & Time in MJDS']                            = a[17-1] # (MJDS=(JD -2430000.5 D0 )*86400+ ISEC) ET\n",
    "header['Fractional seconds of Stop Time. ET']                            = a[18-1]\n",
    "header['Nominal interval between trajectory times in seconds. ET ']      = a[19-1]\n",
    "header['Nominal number of trajectory times.']                            = a[20-1]\n",
    "header['Output S/C ephem ref sys(0 = TOD, 1 = TOR, 2 =  J2000)']         = a[22-1]\n",
    "# \n",
    "header['Speed of Light.']                                     = a[101-1]\n",
    "header['GM for Earth.']                                       = a[102-1]\n",
    "header['Semi -major axis of Earth reference ellipsoid.']      = a[103-1]\n",
    "header['Equatorial Flattening of Earth reference ellipsoid.'] = a[104-1]\n",
    "header['Gravitational Potential Checksum.']                   = a[105-1]\n",
    "header['Maximum Degree of Gravitational Expansion.']          = a[106-1]\n",
    "header['Maximum Order of Gravitational Expansion.']           = a[107-1]   ### SKIP from 108 -200\n",
    "#\n",
    "#### PRESENCE ON FILE INDICATORS\n",
    "## right ascension of Greenwich \n",
    "header['Presence of right ascension of Greenwich for each time point in each Buffer'] = a[201-1]   \n",
    "## Inertial State Vector\n",
    "header['Presence per Sat. of inertial X coordinate for each time point']    = a[202-1]   \n",
    "header['Presence per Sat. of inertial Y coordinate for each time point']    = a[203-1]   \n",
    "header['Presence per Sat. of inertial Z coordinate for each time point']    = a[204-1]   \n",
    "header['Presence per Sat. of inertial Xdot coordinate for each time point'] = a[205-1]   \n",
    "header['Presence per Sat. of inertial Ydot coordinate for each time point'] = a[206-1]   \n",
    "header['Presence per Sat. of inertial Zdot coordinate for each time point'] = a[207-1] \n",
    "# \n",
    "header['Presence per Sat. of geodetic latitude for each time point'] = a[208-1]   \n",
    "header['Presence per Sat. of east longitude for each time point']    = a[209-1]   \n",
    "# \n",
    "header['Presence per Sat. of ECF X coordinate for each time point']  = a[210-1]   \n",
    "header['Presence per Sat. of ECF Y coordinate for each time point']  = a[211-1]   \n",
    "header['Presence per Sat. of ECF Z coordinate for each time point']  = a[212-1]   \n",
    "header['Presence per Sat. of ECF Xdot for each time point']         = a[213-1]   \n",
    "header['Presence per Sat. of ECF Ydot for each time point']         = a[214-1]   \n",
    "header['Presence per Sat. of ECF Zdot for each time point']         = a[215-1]   \n",
    "header['Presence per Sat. of polar motion X for each time point']   = a[216-1]   \n",
    "header['Presence per Sat. of polar motion Y for each time point']   = a[217-1]   \n",
    "header['Presence per Sat. of beta prime angle for each time point'] = a[218-1]   \n",
    "header['Presence per Sat. of yaw angle for each time point']        = a[219-1]   \n",
    "header['Presence per Sat. of orbit angle for each time point']      = a[220-1]   \n",
    "\n",
    "##### Satellite ID ’s for all Satellites on File.\n",
    "###       Trajectory data is ordered based upon order of these Satellite ID ’s.'\n",
    "for i in range(int(NSATS)):\n",
    "    ii = i + 1\n",
    "    index_sats = 300 + (ii)\n",
    "    header['Satellite '+str(ii)+' ID'] = a[index_sats-1]  \n",
    "\n",
    "\n",
    "#### ----------------------------------------------------\n",
    "#### --------------- ALPHANUMERIC RECORDS ---------------\n",
    "#### ----------------------------------------------------\n",
    "#### We don't care about the Alphanumeric buffers so skip over them.\n",
    "for i in range(int(NA)):\n",
    "    a = f.read_record(float)\n",
    "\n",
    "\n",
    "#### -----------------------------------------------------\n",
    "#### -------------- DATA + SENTINEL RECORDS --------------\n",
    "#### -----------------------------------------------------\n",
    "### Read the Data records in a while loop.  \n",
    "### When we hit the end_data_val, we have reached the\n",
    "###    sentinel record and we can exit the while loop \n",
    "###    to read in the sentinel buffer.\n",
    "\n",
    "\n",
    "end_data_val           = 9000000000\n",
    "end_datarecord         = False\n",
    "data_dict_times        = {}\n",
    "data_dict_RA_greenwich = {}\n",
    "data_dict_sat_packets  = {}\n",
    "\n",
    "count_while = 0\n",
    "\n",
    "data_dict_sat_packets['MJDSEC ET']                       =[]\n",
    "data_dict_sat_packets['Satellite Inertial X coordinate'] =[]\n",
    "data_dict_sat_packets['Satellite Inertial Y coordinate'] =[]\n",
    "data_dict_sat_packets['Satellite Inertial Z coordinate'] =[]\n",
    "data_dict_sat_packets['Satellite Inertial X velocity']   =[]\n",
    "data_dict_sat_packets['Satellite Inertial Y velocity']   =[]\n",
    "data_dict_sat_packets['Satellite Inertial Z velocity']   =[]\n",
    "data_dict_sat_packets['Satellite Geodetic Latitude']     =[]\n",
    "data_dict_sat_packets['Satellite East Longitude']        =[]\n",
    "data_dict_sat_packets['Satellite Height']                =[]\n",
    "data_dict_sat_packets['Satellite ECF X coordinate']      =[]\n",
    "data_dict_sat_packets['Satellite ECF Y coordinate']      =[]\n",
    "data_dict_sat_packets['Satellite ECF Z coordinate']      =[]\n",
    "data_dict_sat_packets['Satellite ECF X velocity']        =[]\n",
    "data_dict_sat_packets['Satellite ECF Y velocity']        =[]\n",
    "data_dict_sat_packets['Satellite ECF Z velocity']        =[]\n",
    "data_dict_sat_packets['Polar Motion X']                  =[]\n",
    "data_dict_sat_packets['Polar Motion Y']                  =[]\n",
    "data_dict_sat_packets['Beta prime angle']                =[]\n",
    "data_dict_sat_packets['Yaw angle']                       =[]\n",
    "data_dict_sat_packets['Orbit Angle']                     =[]\n",
    "data_dict_sat_packets['Q(1)']                            =[]\n",
    "data_dict_sat_packets['Q(2)']                            =[]\n",
    "data_dict_sat_packets['Q(3)']                            =[]\n",
    "data_dict_sat_packets['Q(4)']                            =[]\n",
    "\n",
    "while end_datarecord == False:\n",
    "\n",
    "    ### Read in each data buffer\n",
    "    a = f.read_record(float)\n",
    "\n",
    "    if not end_data_val in a:\n",
    "        count_while+=1\n",
    "        NTB    = int(a[5-1])  # Number of trajectory times in this Data Buffer (NTB <= NTIMBF ).\n",
    "        MJDSBF = a[4-1]\n",
    "\n",
    "        #### Trajectory Times in elapsed ET seconds from MJDSBF\n",
    "        counter = 0\n",
    "        for itime in np.arange( (6)   ,   ((NTB+5)  +1)  ):\n",
    "            index_times = int(itime)\n",
    "            data_dict_times[counter] = str(MJDSBF + a[index_times-1] )\n",
    "            counter+=1\n",
    "\n",
    "#             if counter <= 100:\n",
    "#                 print(MJDSBF + a[index_times-1])\n",
    "\n",
    "\n",
    "        #### Right Ascension of Greenwich Values (radians) for each time in Buffer.\n",
    "        counter = 0\n",
    "        for i in np.arange((NTIMBF+6) ,((NTIMBF+5 + NTB)+1)):\n",
    "            counter+=1\n",
    "            index = int(i)\n",
    "            data_dict_RA_greenwich['Right Ascension of Greenwich Values '+ str(counter)] = a[index-1] \n",
    "\n",
    "\n",
    "        ##### Satellite Data Packets\n",
    "        #####    first satellite \n",
    "        #####    first time point \n",
    "        counter = 0        \n",
    "        first_sat_first_time = ((NSATS +1)* NTIMBF +6) + (NSATS -1)* NWDSAT #2* NTIMBF +6\n",
    "        last_sat_last_time   = ((NSATS +1)* NTIMBF +5) + NSATS*NWDSAT*NTB #(((NSATS+1)* NTIMBF+5)+(NSATS*NWDSAT))\n",
    "\n",
    "#         print('first_sat_first_time', first_sat_first_time)\n",
    "#         print('last_sat_last_time  ', last_sat_last_time)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        for i in np.arange(first_sat_first_time, last_sat_last_time  , 24):\n",
    "            index = int(i)\n",
    "\n",
    "            data_dict_sat_packets['MJDSEC ET'].append(data_dict_times[counter])\n",
    "            data_dict_sat_packets['Satellite Inertial X coordinate'].append(a[(index +1) - 2])\n",
    "            data_dict_sat_packets['Satellite Inertial Y coordinate'].append(a[(index +2) - 2])\n",
    "            data_dict_sat_packets['Satellite Inertial Z coordinate'].append(a[(index +3) - 2])\n",
    "            data_dict_sat_packets['Satellite Inertial X velocity'].append(a[(index +4) - 2])\n",
    "            data_dict_sat_packets['Satellite Inertial Y velocity'].append(a[(index +5) - 2])\n",
    "            data_dict_sat_packets['Satellite Inertial Z velocity'].append(a[(index +6) - 2])\n",
    "            data_dict_sat_packets['Satellite Geodetic Latitude'].append(a[(index +7) - 2])\n",
    "            data_dict_sat_packets['Satellite East Longitude'].append(a[(index +8) - 2])\n",
    "            data_dict_sat_packets['Satellite Height'].append(a[(index +9) - 2])\n",
    "            data_dict_sat_packets['Satellite ECF X coordinate'].append(a[(index +10) - 2])\n",
    "            data_dict_sat_packets['Satellite ECF Y coordinate'].append(a[(index +11) - 2])\n",
    "            data_dict_sat_packets['Satellite ECF Z coordinate'].append(a[(index +12) - 2])\n",
    "            data_dict_sat_packets['Satellite ECF X velocity'].append(a[(index +13) - 2])\n",
    "            data_dict_sat_packets['Satellite ECF Y velocity'].append(a[(index +14) - 2])\n",
    "            data_dict_sat_packets['Satellite ECF Z velocity'].append(a[(index +15) - 2])\n",
    "            data_dict_sat_packets['Polar Motion X'].append(a[(index +16) - 2])\n",
    "            data_dict_sat_packets['Polar Motion Y'].append(a[(index +17) - 2])\n",
    "            data_dict_sat_packets['Beta prime angle'].append(a[(index +18) - 2])\n",
    "            data_dict_sat_packets['Yaw angle'].append(a[(index +19) - 2])\n",
    "            data_dict_sat_packets['Orbit Angle'].append(a[(index +20) - 2])\n",
    "            data_dict_sat_packets['Q(1)'].append(a[(index +21) - 2])\n",
    "            data_dict_sat_packets['Q(2)'].append(a[(index +22) - 2])\n",
    "            data_dict_sat_packets['Q(3)'].append(a[(index +23) - 2])\n",
    "            data_dict_sat_packets['Q(4)'].append(a[(index +24) - 2])\n",
    "            counter+=1\n",
    "\n",
    "\n",
    "#         print('counter',counter)    \n",
    "\n",
    "    else:\n",
    "        ####  If the the first index has +9000000000 we are at the sentinel record \n",
    "        #     which denotes the end of the data section.\n",
    "        print('----- End of file')\n",
    "        print('sentinel buffer indicator                       ',a[1-1])\n",
    "        print('Count of the number of Data Buffers. GEODYN     ',a[2-1])\n",
    "        print('GEODYN II Interface File creation date and time.',a[3-1])\n",
    "        print('GEODYN II -S version used.                      ',a[4-1])\n",
    "        print('GEODYN II -E version used.                      ',a[5-1])\n",
    "        print('spare                                           ',a[6-1])\n",
    "        print('spare                                           ',a[7-1])\n",
    "        end_datarecord = True\n",
    "        f.close()  #### be sure to close the file\n",
    "\n",
    "\n",
    "data_record_df = pd.DataFrame.from_dict(data_dict_sat_packets, orient='columns')\n",
    "\n",
    "#### Save as a dictionary\n",
    "orbfil_dict = {}\n",
    "orbfil_dict['header'] = header\n",
    "orbfil_dict['data_record'] = data_record_df\n",
    "\n",
    "\n",
    "##### Convert from Terrestrial time to UTC:\n",
    "MJDS_UTC = [Convert_ET_TDT_to_UTC(float(x), 37) for x in orbfil_dict['data_record']['MJDSEC ET'] ]\n",
    "\n",
    "\n",
    "##### Calculate the Gregorian Calendar date:\n",
    "yymmdd_str = [MJDS_to_YYMMDDHHMMSS(x) for x in MJDS_UTC]\n",
    "\n",
    "\n",
    "##### Compute date as Datetime object:\n",
    "dates_dt_UTC = [pd.to_datetime( x, format='%y%m%d-%H%M%S') for x in yymmdd_str]\n",
    "\n",
    "orbfil_dict['data_record'][\"Date_UTC\"] = dates_dt_UTC\n",
    "\n",
    "os.system('bzip2 -v '+ orb_fil )\n",
    "\n",
    "\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e6c8cbc9",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-27T20:24:20.173934Z",
     "start_time": "2021-05-27T20:24:20.162415Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[2456514000.0,\n",
       " 2456514006.0,\n",
       " 2456514012.0,\n",
       " 2456514018.0,\n",
       " 2456514024.0,\n",
       " 2456514030.0,\n",
       " 2456514036.0,\n",
       " 2456514042.0,\n",
       " 2456514048.0,\n",
       " 2456514054.0,\n",
       " 2456514060.0,\n",
       " 2456514066.0,\n",
       " 2456514072.0,\n",
       " 2456514078.0,\n",
       " 2456514084.0,\n",
       " 2456514090.0,\n",
       " 2456514096.0,\n",
       " 2456514102.0,\n",
       " 2456514108.0,\n",
       " 2456514114.0,\n",
       " 2456514120.0,\n",
       " 2456514126.0,\n",
       " 2456514132.0,\n",
       " 2456514138.0,\n",
       " 2456514144.0,\n",
       " 2456514150.0,\n",
       " 2456514156.0,\n",
       " 2456514162.0,\n",
       " 2456514168.0,\n",
       " 2456514174.0,\n",
       " 2456514180.0,\n",
       " 2456514186.0,\n",
       " 2456514192.0,\n",
       " 2456514198.0,\n",
       " 2456514204.0,\n",
       " 2456514210.0,\n",
       " 2456514216.0,\n",
       " 2456514222.0,\n",
       " 2456514228.0,\n",
       " 2456514234.0,\n",
       " 2456514240.0,\n",
       " 2456514246.0,\n",
       " 2456514252.0,\n",
       " 2456514258.0,\n",
       " 2456514264.0,\n",
       " 2456514270.0,\n",
       " 2456514276.0,\n",
       " 2456514282.0,\n",
       " 2456514288.0,\n",
       " 2456514294.0,\n",
       " 2456514300.0,\n",
       " 2456514306.0,\n",
       " 2456514312.0,\n",
       " 2456514318.0,\n",
       " 2456514324.0,\n",
       " 2456514330.0,\n",
       " 2456514336.0,\n",
       " 2456514342.0,\n",
       " 2456514348.0,\n",
       " 2456514354.0,\n",
       " 2456514360.0,\n",
       " 2456514366.0,\n",
       " 2456514372.0,\n",
       " 2456514378.0,\n",
       " 2456514384.0,\n",
       " 2456514390.0,\n",
       " 2456514396.0,\n",
       " 2456514402.0,\n",
       " 2456514408.0,\n",
       " 2456514414.0,\n",
       " 2456514420.0,\n",
       " 2456514426.0,\n",
       " 2456514432.0,\n",
       " 2456514438.0,\n",
       " 2456514444.0,\n",
       " 2456514450.0,\n",
       " 2456514456.0,\n",
       " 2456514462.0,\n",
       " 2456514468.0,\n",
       " 2456514474.0,\n",
       " 2456514480.0,\n",
       " 2456514486.0,\n",
       " 2456514492.0,\n",
       " 2456514498.0,\n",
       " 2456514504.0,\n",
       " 2456514510.0,\n",
       " 2456514516.0,\n",
       " 2456514522.0,\n",
       " 2456514528.0,\n",
       " 2456514534.0,\n",
       " 2456514540.0,\n",
       " 2456514546.0,\n",
       " 2456514552.0,\n",
       " 2456514558.0,\n",
       " 2456514564.0,\n",
       " 2456514570.0,\n",
       " 2456514576.0,\n",
       " 2456514582.0,\n",
       " 2456514588.0,\n",
       " 2456514594.0,\n",
       " 2456514600.0,\n",
       " 2456514606.0,\n",
       " 2456514612.0,\n",
       " 2456514618.0,\n",
       " 2456514624.0,\n",
       " 2456514630.0,\n",
       " 2456514636.0,\n",
       " 2456514642.0,\n",
       " 2456514648.0,\n",
       " 2456514654.0,\n",
       " 2456514660.0,\n",
       " 2456514666.0,\n",
       " 2456514672.0,\n",
       " 2456514678.0,\n",
       " 2456514684.0,\n",
       " 2456514690.0,\n",
       " 2456514696.0,\n",
       " 2456514702.0,\n",
       " 2456514708.0,\n",
       " 2456514714.0,\n",
       " 2456514720.0,\n",
       " 2456514726.0,\n",
       " 2456514732.0,\n",
       " 2456514738.0,\n",
       " 2456514744.0,\n",
       " 2456514750.0,\n",
       " 2456514756.0,\n",
       " 2456514762.0,\n",
       " 2456514768.0,\n",
       " 2456514774.0,\n",
       " 2456514780.0,\n",
       " 2456514786.0,\n",
       " 2456514792.0,\n",
       " 2456514798.0,\n",
       " 2456514804.0,\n",
       " 2456514810.0,\n",
       " 2456514816.0,\n",
       " 2456514822.0,\n",
       " 2456514828.0,\n",
       " 2456514834.0,\n",
       " 2456514840.0,\n",
       " 2456514846.0,\n",
       " 2456514852.0,\n",
       " 2456514858.0,\n",
       " 2456514864.0,\n",
       " 2456514870.0,\n",
       " 2456514876.0,\n",
       " 2456514882.0,\n",
       " 2456514888.0,\n",
       " 2456514894.0,\n",
       " 2456514900.0,\n",
       " 2456514906.0,\n",
       " 2456514912.0,\n",
       " 2456514918.0,\n",
       " 2456514924.0,\n",
       " 2456514930.0,\n",
       " 2456514936.0,\n",
       " 2456514942.0,\n",
       " 2456514948.0,\n",
       " 2456514954.0,\n",
       " 2456514960.0,\n",
       " 2456514966.0,\n",
       " 2456514972.0,\n",
       " 2456514978.0,\n",
       " 2456514984.0,\n",
       " 2456514990.0,\n",
       " 2456514996.0,\n",
       " 2456515002.0,\n",
       " 2456515008.0,\n",
       " 2456515014.0,\n",
       " 2456515020.0,\n",
       " 2456515026.0,\n",
       " 2456515032.0,\n",
       " 2456515038.0,\n",
       " 2456515044.0,\n",
       " 2456515050.0,\n",
       " 2456515056.0,\n",
       " 2456515062.0,\n",
       " 2456515068.0,\n",
       " 2456515074.0,\n",
       " 2456515080.0,\n",
       " 2456515086.0,\n",
       " 2456515092.0,\n",
       " 2456515098.0,\n",
       " 2456515104.0,\n",
       " 2456515110.0,\n",
       " 2456515116.0,\n",
       " 2456515122.0,\n",
       " 2456515128.0,\n",
       " 2456515134.0,\n",
       " 2456515140.0,\n",
       " 2456515146.0,\n",
       " 2456515152.0,\n",
       " 2456515158.0,\n",
       " 2456515164.0,\n",
       " 2456515170.0,\n",
       " 2456515176.0,\n",
       " 2456515182.0,\n",
       " 2456515188.0,\n",
       " 2456515194.0,\n",
       " 2456515200.0,\n",
       " 2456515206.0,\n",
       " 2456515212.0,\n",
       " 2456515218.0,\n",
       " 2456515224.0,\n",
       " 2456515230.0,\n",
       " 2456515236.0,\n",
       " 2456515242.0,\n",
       " 2456515248.0,\n",
       " 2456515254.0,\n",
       " 2456515260.0,\n",
       " 2456515266.0,\n",
       " 2456515272.0,\n",
       " 2456515278.0,\n",
       " 2456515284.0,\n",
       " 2456515290.0,\n",
       " 2456515296.0,\n",
       " 2456515302.0,\n",
       " 2456515308.0,\n",
       " 2456515314.0,\n",
       " 2456515320.0,\n",
       " 2456515326.0,\n",
       " 2456515332.0,\n",
       " 2456515338.0,\n",
       " 2456515344.0,\n",
       " 2456515350.0,\n",
       " 2456515356.0,\n",
       " 2456515362.0,\n",
       " 2456515368.0,\n",
       " 2456515374.0,\n",
       " 2456515380.0,\n",
       " 2456515386.0,\n",
       " 2456515392.0,\n",
       " 2456515398.0,\n",
       " 2456515404.0,\n",
       " 2456515410.0,\n",
       " 2456515416.0,\n",
       " 2456515422.0,\n",
       " 2456515428.0,\n",
       " 2456515434.0,\n",
       " 2456515440.0,\n",
       " 2456515446.0,\n",
       " 2456515452.0,\n",
       " 2456515458.0,\n",
       " 2456515464.0,\n",
       " 2456515470.0,\n",
       " 2456515476.0,\n",
       " 2456515482.0,\n",
       " 2456515488.0,\n",
       " 2456515494.0,\n",
       " 2456515500.0,\n",
       " 2456515506.0,\n",
       " 2456515512.0,\n",
       " 2456515518.0,\n",
       " 2456515524.0,\n",
       " 2456515530.0,\n",
       " 2456515536.0,\n",
       " 2456515542.0,\n",
       " 2456515548.0,\n",
       " 2456515554.0,\n",
       " 2456515560.0,\n",
       " 2456515566.0,\n",
       " 2456515572.0,\n",
       " 2456515578.0,\n",
       " 2456515584.0,\n",
       " 2456515590.0,\n",
       " 2456515596.0,\n",
       " 2456515602.0,\n",
       " 2456515608.0,\n",
       " 2456515614.0,\n",
       " 2456515620.0,\n",
       " 2456515626.0,\n",
       " 2456515632.0,\n",
       " 2456515638.0,\n",
       " 2456515644.0,\n",
       " 2456515650.0,\n",
       " 2456515656.0,\n",
       " 2456515662.0,\n",
       " 2456515668.0,\n",
       " 2456515674.0,\n",
       " 2456515680.0,\n",
       " 2456515686.0,\n",
       " 2456515692.0,\n",
       " 2456515698.0,\n",
       " 2456515704.0,\n",
       " 2456515710.0,\n",
       " 2456515716.0,\n",
       " 2456515722.0,\n",
       " 2456515728.0,\n",
       " 2456515734.0,\n",
       " 2456515740.0,\n",
       " 2456515746.0,\n",
       " 2456515752.0,\n",
       " 2456515758.0,\n",
       " 2456515764.0,\n",
       " 2456515770.0,\n",
       " 2456515776.0,\n",
       " 2456515782.0,\n",
       " 2456515788.0,\n",
       " 2456515794.0,\n",
       " 2456515800.0,\n",
       " 2456515806.0,\n",
       " 2456515812.0,\n",
       " 2456515818.0,\n",
       " 2456515824.0,\n",
       " 2456515830.0,\n",
       " 2456515836.0,\n",
       " 2456515842.0,\n",
       " 2456515848.0,\n",
       " 2456515854.0,\n",
       " 2456515860.0,\n",
       " 2456515866.0,\n",
       " 2456515872.0,\n",
       " 2456515878.0,\n",
       " 2456515884.0,\n",
       " 2456515890.0,\n",
       " 2456515896.0,\n",
       " 2456515902.0,\n",
       " 2456515908.0,\n",
       " 2456515914.0,\n",
       " 2456515920.0,\n",
       " 2456515926.0,\n",
       " 2456515932.0,\n",
       " 2456515938.0,\n",
       " 2456515944.0,\n",
       " 2456515950.0,\n",
       " 2456515956.0,\n",
       " 2456515962.0,\n",
       " 2456515968.0,\n",
       " 2456515974.0,\n",
       " 2456515980.0,\n",
       " 2456515986.0,\n",
       " 2456515992.0,\n",
       " 2456515998.0,\n",
       " 2456516004.0,\n",
       " 2456516010.0,\n",
       " 2456516016.0,\n",
       " 2456516022.0,\n",
       " 2456516028.0,\n",
       " 2456516034.0,\n",
       " 2456516040.0,\n",
       " 2456516046.0,\n",
       " 2456516052.0,\n",
       " 2456516058.0,\n",
       " 2456516064.0,\n",
       " 2456516070.0,\n",
       " 2456516076.0,\n",
       " 2456516082.0,\n",
       " 2456516088.0,\n",
       " 2456516094.0,\n",
       " 2456516100.0,\n",
       " 2456516106.0,\n",
       " 2456516112.0,\n",
       " 2456516118.0,\n",
       " 2456516124.0,\n",
       " 2456516130.0,\n",
       " 2456516136.0,\n",
       " 2456516142.0,\n",
       " 2456516148.0,\n",
       " 2456516154.0,\n",
       " 2456516160.0,\n",
       " 2456516166.0,\n",
       " 2456516172.0,\n",
       " 2456516178.0,\n",
       " 2456516184.0,\n",
       " 2456516190.0,\n",
       " 2456516196.0,\n",
       " 2456516202.0,\n",
       " 2456516208.0,\n",
       " 2456516214.0,\n",
       " 2456516220.0,\n",
       " 2456516226.0,\n",
       " 2456516232.0,\n",
       " 2456516238.0,\n",
       " 2456516244.0,\n",
       " 2456516250.0,\n",
       " 2456516256.0,\n",
       " 2456516262.0,\n",
       " 2456516268.0,\n",
       " 2456516274.0,\n",
       " 2456516280.0,\n",
       " 2456516286.0,\n",
       " 2456516292.0,\n",
       " 2456516298.0,\n",
       " 2456516304.0,\n",
       " 2456516310.0,\n",
       " 2456516316.0,\n",
       " 2456516322.0,\n",
       " 2456516328.0,\n",
       " 2456516334.0,\n",
       " 2456516340.0,\n",
       " 2456516346.0,\n",
       " 2456516352.0,\n",
       " 2456516358.0,\n",
       " 2456516364.0,\n",
       " 2456516370.0,\n",
       " 2456516376.0,\n",
       " 2456516382.0,\n",
       " 2456516388.0,\n",
       " 2456516394.0,\n",
       " 2456516400.0,\n",
       " 2456516406.0,\n",
       " 2456516412.0,\n",
       " 2456516418.0,\n",
       " 2456516424.0,\n",
       " 2456516430.0,\n",
       " 2456516436.0,\n",
       " 2456516442.0,\n",
       " 2456516448.0,\n",
       " 2456516454.0,\n",
       " 2456516460.0,\n",
       " 2456516466.0,\n",
       " 2456516472.0,\n",
       " 2456516478.0,\n",
       " 2456516484.0,\n",
       " 2456516490.0,\n",
       " 2456516496.0,\n",
       " 2456516502.0,\n",
       " 2456516508.0,\n",
       " 2456516514.0,\n",
       " 2456516520.0,\n",
       " 2456516526.0,\n",
       " 2456516532.0,\n",
       " 2456516538.0,\n",
       " 2456516544.0,\n",
       " 2456516550.0,\n",
       " 2456516556.0,\n",
       " 2456516562.0,\n",
       " 2456516568.0,\n",
       " 2456516574.0,\n",
       " 2456516580.0,\n",
       " 2456516586.0,\n",
       " 2456516592.0,\n",
       " 2456516598.0,\n",
       " 2456516604.0,\n",
       " 2456516610.0,\n",
       " 2456516616.0,\n",
       " 2456516622.0,\n",
       " 2456516628.0,\n",
       " 2456516634.0,\n",
       " 2456516640.0,\n",
       " 2456516646.0,\n",
       " 2456516652.0,\n",
       " 2456516658.0,\n",
       " 2456516664.0,\n",
       " 2456516670.0,\n",
       " 2456516676.0,\n",
       " 2456516682.0,\n",
       " 2456516688.0,\n",
       " 2456516694.0,\n",
       " 2456516700.0,\n",
       " 2456516706.0,\n",
       " 2456516712.0,\n",
       " 2456516718.0,\n",
       " 2456516724.0,\n",
       " 2456516730.0,\n",
       " 2456516736.0,\n",
       " 2456516742.0,\n",
       " 2456516748.0,\n",
       " 2456516754.0,\n",
       " 2456516760.0,\n",
       " 2456516766.0,\n",
       " 2456516772.0,\n",
       " 2456516778.0,\n",
       " 2456516784.0,\n",
       " 2456516790.0,\n",
       " 2456516796.0,\n",
       " 2456516802.0,\n",
       " 2456516808.0,\n",
       " 2456516814.0,\n",
       " 2456516820.0,\n",
       " 2456516826.0,\n",
       " 2456516832.0,\n",
       " 2456516838.0,\n",
       " 2456516844.0,\n",
       " 2456516850.0,\n",
       " 2456516856.0,\n",
       " 2456516862.0,\n",
       " 2456516868.0,\n",
       " 2456516874.0,\n",
       " 2456516880.0,\n",
       " 2456516886.0,\n",
       " 2456516892.0,\n",
       " 2456516898.0,\n",
       " 2456516904.0,\n",
       " 2456516910.0,\n",
       " 2456516916.0,\n",
       " 2456516922.0,\n",
       " 2456516928.0,\n",
       " 2456516934.0,\n",
       " 2456516940.0,\n",
       " 2456516946.0,\n",
       " 2456516952.0,\n",
       " 2456516958.0,\n",
       " 2456516964.0,\n",
       " 2456516970.0,\n",
       " 2456516976.0,\n",
       " 2456516982.0,\n",
       " 2456516988.0,\n",
       " 2456516994.0,\n",
       " 2456517000.0,\n",
       " 2456517006.0,\n",
       " 2456517012.0,\n",
       " 2456517018.0,\n",
       " 2456517024.0,\n",
       " 2456517030.0,\n",
       " 2456517036.0,\n",
       " 2456517042.0,\n",
       " 2456517048.0,\n",
       " 2456517054.0,\n",
       " 2456517060.0,\n",
       " 2456517066.0,\n",
       " 2456517072.0,\n",
       " 2456517078.0,\n",
       " 2456517084.0,\n",
       " 2456517090.0,\n",
       " 2456517096.0,\n",
       " 2456517102.0,\n",
       " 2456517108.0,\n",
       " 2456517114.0,\n",
       " 2456517120.0,\n",
       " 2456517126.0,\n",
       " 2456517132.0,\n",
       " 2456517138.0,\n",
       " 2456517144.0,\n",
       " 2456517150.0,\n",
       " 2456517156.0,\n",
       " 2456517162.0,\n",
       " 2456517168.0,\n",
       " 2456517174.0,\n",
       " 2456517180.0,\n",
       " 2456517186.0,\n",
       " 2456517192.0,\n",
       " 2456517198.0,\n",
       " 2456517204.0,\n",
       " 2456517210.0,\n",
       " 2456517216.0,\n",
       " 2456517222.0,\n",
       " 2456517228.0,\n",
       " 2456517234.0,\n",
       " 2456517240.0,\n",
       " 2456517246.0,\n",
       " 2456517252.0,\n",
       " 2456517258.0,\n",
       " 2456517264.0,\n",
       " 2456517270.0,\n",
       " 2456517276.0,\n",
       " 2456517282.0,\n",
       " 2456517288.0,\n",
       " 2456517294.0,\n",
       " 2456517300.0,\n",
       " 2456517306.0,\n",
       " 2456517312.0,\n",
       " 2456517318.0,\n",
       " 2456517324.0,\n",
       " 2456517330.0,\n",
       " 2456517336.0,\n",
       " 2456517342.0,\n",
       " 2456517348.0,\n",
       " 2456517354.0,\n",
       " 2456517360.0,\n",
       " 2456517366.0,\n",
       " 2456517372.0,\n",
       " 2456517378.0,\n",
       " 2456517384.0,\n",
       " 2456517390.0,\n",
       " 2456517396.0,\n",
       " 2456517402.0,\n",
       " 2456517408.0,\n",
       " 2456517414.0,\n",
       " 2456517420.0,\n",
       " 2456517426.0,\n",
       " 2456517432.0,\n",
       " 2456517438.0,\n",
       " 2456517444.0,\n",
       " 2456517450.0,\n",
       " 2456517456.0,\n",
       " 2456517462.0,\n",
       " 2456517468.0,\n",
       " 2456517474.0,\n",
       " 2456517480.0,\n",
       " 2456517486.0,\n",
       " 2456517492.0,\n",
       " 2456517498.0,\n",
       " 2456517504.0,\n",
       " 2456517510.0,\n",
       " 2456517516.0,\n",
       " 2456517522.0,\n",
       " 2456517528.0,\n",
       " 2456517534.0,\n",
       " 2456517540.0,\n",
       " 2456517546.0,\n",
       " 2456517552.0,\n",
       " 2456517558.0,\n",
       " 2456517564.0,\n",
       " 2456517570.0,\n",
       " 2456517576.0,\n",
       " 2456517582.0,\n",
       " 2456517588.0,\n",
       " 2456517594.0,\n",
       " 2456517600.0,\n",
       " 2456517606.0,\n",
       " 2456517612.0,\n",
       " 2456517618.0,\n",
       " 2456517624.0,\n",
       " 2456517630.0,\n",
       " 2456517636.0,\n",
       " 2456517642.0,\n",
       " 2456517648.0,\n",
       " 2456517654.0,\n",
       " 2456517660.0,\n",
       " 2456517666.0,\n",
       " 2456517672.0,\n",
       " 2456517678.0,\n",
       " 2456517684.0,\n",
       " 2456517690.0,\n",
       " 2456517696.0,\n",
       " 2456517702.0,\n",
       " 2456517708.0,\n",
       " 2456517714.0,\n",
       " 2456517720.0,\n",
       " 2456517726.0,\n",
       " 2456517732.0,\n",
       " 2456517738.0,\n",
       " 2456517744.0,\n",
       " 2456517750.0,\n",
       " 2456517756.0,\n",
       " 2456517762.0,\n",
       " 2456517768.0,\n",
       " 2456517774.0,\n",
       " 2456517780.0,\n",
       " 2456517786.0,\n",
       " 2456517792.0,\n",
       " 2456517798.0,\n",
       " 2456517804.0,\n",
       " 2456517810.0,\n",
       " 2456517816.0,\n",
       " 2456517822.0,\n",
       " 2456517828.0,\n",
       " 2456517834.0,\n",
       " 2456517840.0,\n",
       " 2456517846.0,\n",
       " 2456517852.0,\n",
       " 2456517858.0,\n",
       " 2456517864.0,\n",
       " 2456517870.0,\n",
       " 2456517876.0,\n",
       " 2456517882.0,\n",
       " 2456517888.0,\n",
       " 2456517894.0,\n",
       " 2456517900.0,\n",
       " 2456517906.0,\n",
       " 2456517912.0,\n",
       " 2456517918.0,\n",
       " 2456517924.0,\n",
       " 2456517930.0,\n",
       " 2456517936.0,\n",
       " 2456517942.0,\n",
       " 2456517948.0,\n",
       " 2456517954.0,\n",
       " 2456517960.0,\n",
       " 2456517966.0,\n",
       " 2456517972.0,\n",
       " 2456517978.0,\n",
       " 2456517984.0,\n",
       " 2456517990.0,\n",
       " 2456517996.0,\n",
       " 2456518002.0,\n",
       " 2456518008.0,\n",
       " 2456518014.0,\n",
       " 2456518020.0,\n",
       " 2456518026.0,\n",
       " 2456518032.0,\n",
       " 2456518038.0,\n",
       " 2456518044.0,\n",
       " 2456518050.0,\n",
       " 2456518056.0,\n",
       " 2456518062.0,\n",
       " 2456518068.0,\n",
       " 2456518074.0,\n",
       " 2456518080.0,\n",
       " 2456518086.0,\n",
       " 2456518092.0,\n",
       " 2456518098.0,\n",
       " 2456518104.0,\n",
       " 2456518110.0,\n",
       " 2456518116.0,\n",
       " 2456518122.0,\n",
       " 2456518128.0,\n",
       " 2456518134.0,\n",
       " 2456518140.0,\n",
       " 2456518146.0,\n",
       " 2456518152.0,\n",
       " 2456518158.0,\n",
       " 2456518164.0,\n",
       " 2456518170.0,\n",
       " 2456518176.0,\n",
       " 2456518182.0,\n",
       " 2456518188.0,\n",
       " 2456518194.0,\n",
       " 2456518200.0,\n",
       " 2456518206.0,\n",
       " 2456518212.0,\n",
       " 2456518218.0,\n",
       " 2456518224.0,\n",
       " 2456518230.0,\n",
       " 2456518236.0,\n",
       " 2456518242.0,\n",
       " 2456518248.0,\n",
       " 2456518254.0,\n",
       " 2456518260.0,\n",
       " 2456518266.0,\n",
       " 2456518272.0,\n",
       " 2456518278.0,\n",
       " 2456518284.0,\n",
       " 2456518290.0,\n",
       " 2456518296.0,\n",
       " 2456518302.0,\n",
       " 2456518308.0,\n",
       " 2456518314.0,\n",
       " 2456518320.0,\n",
       " 2456518326.0,\n",
       " 2456518332.0,\n",
       " 2456518338.0,\n",
       " 2456518344.0,\n",
       " 2456518350.0,\n",
       " 2456518356.0,\n",
       " 2456518362.0,\n",
       " 2456518368.0,\n",
       " 2456518374.0,\n",
       " 2456518380.0,\n",
       " 2456518386.0,\n",
       " 2456518392.0,\n",
       " 2456518398.0,\n",
       " 2456518404.0,\n",
       " 2456518410.0,\n",
       " 2456518416.0,\n",
       " 2456518422.0,\n",
       " 2456518428.0,\n",
       " 2456518434.0,\n",
       " 2456518440.0,\n",
       " 2456518446.0,\n",
       " 2456518452.0,\n",
       " 2456518458.0,\n",
       " 2456518464.0,\n",
       " 2456518470.0,\n",
       " 2456518476.0,\n",
       " 2456518482.0,\n",
       " 2456518488.0,\n",
       " 2456518494.0,\n",
       " 2456518500.0,\n",
       " 2456518506.0,\n",
       " 2456518512.0,\n",
       " 2456518518.0,\n",
       " 2456518524.0,\n",
       " 2456518530.0,\n",
       " 2456518536.0,\n",
       " 2456518542.0,\n",
       " 2456518548.0,\n",
       " 2456518554.0,\n",
       " 2456518560.0,\n",
       " 2456518566.0,\n",
       " 2456518572.0,\n",
       " 2456518578.0,\n",
       " 2456518584.0,\n",
       " 2456518590.0,\n",
       " 2456518596.0,\n",
       " 2456518602.0,\n",
       " 2456518608.0,\n",
       " 2456518614.0,\n",
       " 2456518620.0,\n",
       " 2456518626.0,\n",
       " 2456518632.0,\n",
       " 2456518638.0,\n",
       " 2456518644.0,\n",
       " 2456518650.0,\n",
       " 2456518656.0,\n",
       " 2456518662.0,\n",
       " 2456518668.0,\n",
       " 2456518674.0,\n",
       " 2456518680.0,\n",
       " 2456518686.0,\n",
       " 2456518692.0,\n",
       " 2456518698.0,\n",
       " 2456518704.0,\n",
       " 2456518710.0,\n",
       " 2456518716.0,\n",
       " 2456518722.0,\n",
       " 2456518728.0,\n",
       " 2456518734.0,\n",
       " 2456518740.0,\n",
       " 2456518746.0,\n",
       " 2456518752.0,\n",
       " 2456518758.0,\n",
       " 2456518764.0,\n",
       " 2456518770.0,\n",
       " 2456518776.0,\n",
       " 2456518782.0,\n",
       " 2456518788.0,\n",
       " 2456518794.0,\n",
       " 2456518800.0,\n",
       " 2456518806.0,\n",
       " 2456518812.0,\n",
       " 2456518818.0,\n",
       " 2456518824.0,\n",
       " 2456518830.0,\n",
       " 2456518836.0,\n",
       " 2456518842.0,\n",
       " 2456518848.0,\n",
       " 2456518854.0,\n",
       " 2456518860.0,\n",
       " 2456518866.0,\n",
       " 2456518872.0,\n",
       " 2456518878.0,\n",
       " 2456518884.0,\n",
       " 2456518890.0,\n",
       " 2456518896.0,\n",
       " 2456518902.0,\n",
       " 2456518908.0,\n",
       " 2456518914.0,\n",
       " 2456518920.0,\n",
       " 2456518926.0,\n",
       " 2456518932.0,\n",
       " 2456518938.0,\n",
       " 2456518944.0,\n",
       " 2456518950.0,\n",
       " 2456518956.0,\n",
       " 2456518962.0,\n",
       " 2456518968.0,\n",
       " 2456518974.0,\n",
       " 2456518980.0,\n",
       " 2456518986.0,\n",
       " 2456518992.0,\n",
       " 2456518998.0,\n",
       " 2456519004.0,\n",
       " 2456519010.0,\n",
       " 2456519016.0,\n",
       " 2456519022.0,\n",
       " 2456519028.0,\n",
       " 2456519034.0,\n",
       " 2456519040.0,\n",
       " 2456519046.0,\n",
       " 2456519052.0,\n",
       " 2456519058.0,\n",
       " 2456519064.0,\n",
       " 2456519070.0,\n",
       " 2456519076.0,\n",
       " 2456519082.0,\n",
       " 2456519088.0,\n",
       " 2456519094.0,\n",
       " 2456519100.0,\n",
       " 2456519106.0,\n",
       " 2456519112.0,\n",
       " 2456519118.0,\n",
       " 2456519124.0,\n",
       " 2456519130.0,\n",
       " 2456519136.0,\n",
       " 2456519142.0,\n",
       " 2456519148.0,\n",
       " 2456519154.0,\n",
       " 2456519160.0,\n",
       " 2456519166.0,\n",
       " 2456519172.0,\n",
       " 2456519178.0,\n",
       " 2456519184.0,\n",
       " 2456519190.0,\n",
       " 2456519196.0,\n",
       " 2456519202.0,\n",
       " 2456519208.0,\n",
       " 2456519214.0,\n",
       " 2456519220.0,\n",
       " 2456519226.0,\n",
       " 2456519232.0,\n",
       " 2456519238.0,\n",
       " 2456519244.0,\n",
       " 2456519250.0,\n",
       " 2456519256.0,\n",
       " 2456519262.0,\n",
       " 2456519268.0,\n",
       " 2456519274.0,\n",
       " 2456519280.0,\n",
       " 2456519286.0,\n",
       " 2456519292.0,\n",
       " 2456519298.0,\n",
       " 2456519304.0,\n",
       " 2456519310.0,\n",
       " 2456519316.0,\n",
       " 2456519322.0,\n",
       " 2456519328.0,\n",
       " 2456519334.0,\n",
       " 2456519340.0,\n",
       " 2456519346.0,\n",
       " 2456519352.0,\n",
       " 2456519358.0,\n",
       " 2456519364.0,\n",
       " 2456519370.0,\n",
       " 2456519376.0,\n",
       " 2456519382.0,\n",
       " 2456519388.0,\n",
       " 2456519394.0,\n",
       " 2456519400.0,\n",
       " 2456519406.0,\n",
       " 2456519412.0,\n",
       " 2456519418.0,\n",
       " 2456519424.0,\n",
       " 2456519430.0,\n",
       " 2456519436.0,\n",
       " 2456519442.0,\n",
       " 2456519448.0,\n",
       " 2456519454.0,\n",
       " 2456519460.0,\n",
       " 2456519466.0,\n",
       " 2456519472.0,\n",
       " 2456519478.0,\n",
       " 2456519484.0,\n",
       " 2456519490.0,\n",
       " 2456519496.0,\n",
       " 2456519502.0,\n",
       " 2456519508.0,\n",
       " 2456519514.0,\n",
       " 2456519520.0,\n",
       " 2456519526.0,\n",
       " 2456519532.0,\n",
       " 2456519538.0,\n",
       " 2456519544.0,\n",
       " 2456519550.0,\n",
       " 2456519556.0,\n",
       " 2456519562.0,\n",
       " 2456519568.0,\n",
       " 2456519574.0,\n",
       " 2456519580.0,\n",
       " 2456519586.0,\n",
       " 2456519592.0,\n",
       " 2456519598.0,\n",
       " 2456519604.0,\n",
       " 2456519610.0,\n",
       " 2456519616.0,\n",
       " 2456519622.0,\n",
       " 2456519628.0,\n",
       " 2456519634.0,\n",
       " 2456519640.0,\n",
       " 2456519646.0,\n",
       " 2456519652.0,\n",
       " 2456519658.0,\n",
       " 2456519664.0,\n",
       " 2456519670.0,\n",
       " 2456519676.0,\n",
       " 2456519682.0,\n",
       " 2456519688.0,\n",
       " 2456519694.0,\n",
       " 2456519700.0,\n",
       " 2456519706.0,\n",
       " 2456519712.0,\n",
       " 2456519718.0,\n",
       " 2456519724.0,\n",
       " 2456519730.0,\n",
       " 2456519736.0,\n",
       " 2456519742.0,\n",
       " 2456519748.0,\n",
       " 2456519754.0,\n",
       " 2456519760.0,\n",
       " 2456519766.0,\n",
       " 2456519772.0,\n",
       " 2456519778.0,\n",
       " 2456519784.0,\n",
       " 2456519790.0,\n",
       " 2456519796.0,\n",
       " 2456519802.0,\n",
       " 2456519808.0,\n",
       " 2456519814.0,\n",
       " 2456519820.0,\n",
       " 2456519826.0,\n",
       " 2456519832.0,\n",
       " 2456519838.0,\n",
       " 2456519844.0,\n",
       " 2456519850.0,\n",
       " 2456519856.0,\n",
       " 2456519862.0,\n",
       " 2456519868.0,\n",
       " 2456519874.0,\n",
       " 2456519880.0,\n",
       " 2456519886.0,\n",
       " 2456519892.0,\n",
       " 2456519898.0,\n",
       " 2456519904.0,\n",
       " 2456519910.0,\n",
       " 2456519916.0,\n",
       " 2456519922.0,\n",
       " 2456519928.0,\n",
       " 2456519934.0,\n",
       " 2456519940.0,\n",
       " 2456519946.0,\n",
       " 2456519952.0,\n",
       " 2456519958.0,\n",
       " 2456519964.0,\n",
       " 2456519970.0,\n",
       " 2456519976.0,\n",
       " 2456519982.0,\n",
       " 2456519988.0,\n",
       " 2456519994.0,\n",
       " ...]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MJDS_UTC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "aba019d1",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-27T20:24:20.190368Z",
     "start_time": "2021-05-27T20:24:20.175411Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x 485556.1778580549\n",
      "y 5399551.505079578\n",
      "z 4195936.201646193\n",
      "Date 2018-11-09 21:00:00\n"
     ]
    }
   ],
   "source": [
    "print('x',orbfil_dict['data_record']['Satellite Inertial X coordinate'][0])\n",
    "print('y',orbfil_dict['data_record']['Satellite Inertial Y coordinate'][0])\n",
    "print('z',orbfil_dict['data_record']['Satellite Inertial Z coordinate'][0])\n",
    "\n",
    "print('Date',orbfil_dict['data_record']['Date_UTC'][0])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "52435522",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-27T17:43:41.031685Z",
     "start_time": "2021-05-27T17:43:41.021227Z"
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5f0084fc",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-27T17:44:30.959322Z",
     "start_time": "2021-05-27T17:44:25.892725Z"
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9009a297",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-27T17:49:29.208764Z",
     "start_time": "2021-05-27T17:49:29.104397Z"
    },
    "scrolled": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fc3fb4b2",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-26T21:43:53.058814Z",
     "start_time": "2021-05-26T21:43:53.050240Z"
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fb803db8",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-26T21:48:18.168563Z",
     "start_time": "2021-05-26T21:48:18.163461Z"
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7b24f6ff",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-27T20:24:20.290417Z",
     "start_time": "2021-05-27T20:24:20.192735Z"
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8c137be1",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-26T21:45:51.768975Z",
     "start_time": "2021-05-26T21:45:51.764985Z"
    },
    "scrolled": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ce011fb8",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-27T20:24:32.626883Z",
     "start_time": "2021-05-27T20:24:32.621969Z"
    }
   },
   "outputs": [],
   "source": [
    "#             # in this loop, the counter is the satellite # in order\n",
    "#             data_dict_sat_packets[data_dict_times[counter]] = {}\n",
    "#             data_dict_sat_packets[data_dict_times[counter]]['Satellite Inertial X coordinate'] = a[(index +1) - 2]\n",
    "#             data_dict_sat_packets[data_dict_times[counter]]['Satellite Inertial Y coordinate'] = a[(index +2) - 2]\n",
    "#             data_dict_sat_packets[data_dict_times[counter]]['Satellite Inertial Z coordinate'] = a[(index +3) - 2]\n",
    "#             data_dict_sat_packets[data_dict_times[counter]]['Satellite Inertial X velocity']   = a[(index +4) - 2]\n",
    "#             data_dict_sat_packets[data_dict_times[counter]]['Satellite Inertial Y velocity']   = a[(index +5) - 2]\n",
    "#             data_dict_sat_packets[data_dict_times[counter]]['Satellite Inertial Z velocity']   = a[(index +6) - 2]\n",
    "#             data_dict_sat_packets[data_dict_times[counter]]['Satellite Geodetic Latitude']     = a[(index +7) - 2]\n",
    "#             data_dict_sat_packets[data_dict_times[counter]]['Satellite East Longitude']        = a[(index +8) - 2]\n",
    "#             data_dict_sat_packets[data_dict_times[counter]]['Satellite Height']                = a[(index +9) - 2]\n",
    "#             data_dict_sat_packets[data_dict_times[counter]]['Satellite ECF X coordinate']      = a[(index +10) - 2]\n",
    "#             data_dict_sat_packets[data_dict_times[counter]]['Satellite ECF Y coordinate']      = a[(index +11) - 2]\n",
    "#             data_dict_sat_packets[data_dict_times[counter]]['Satellite ECF Z coordinate']      = a[(index +12) - 2]\n",
    "#             data_dict_sat_packets[data_dict_times[counter]]['Satellite ECF X velocity']        = a[(index +13) - 2]\n",
    "#             data_dict_sat_packets[data_dict_times[counter]]['Satellite ECF Y velocity']        = a[(index +14) - 2]\n",
    "#             data_dict_sat_packets[data_dict_times[counter]]['Satellite ECF Z velocity']        = a[(index +15) - 2]\n",
    "#             data_dict_sat_packets[data_dict_times[counter]]['Polar Motion X']                  = a[(index +16) - 2]\n",
    "#             data_dict_sat_packets[data_dict_times[counter]]['Polar Motion Y']                  = a[(index +17) - 2]\n",
    "#             data_dict_sat_packets[data_dict_times[counter]]['Beta prime angle']                = a[(index +18) - 2]\n",
    "#             data_dict_sat_packets[data_dict_times[counter]]['Yaw angle']                       = a[(index +19) - 2]\n",
    "#             data_dict_sat_packets[data_dict_times[counter]]['Orbit Angle']                     = a[(index +20) - 2]\n",
    "#             data_dict_sat_packets[data_dict_times[counter]]['Q(1)']                            = a[(index +21) - 2]\n",
    "#             data_dict_sat_packets[data_dict_times[counter]]['Q(2)']                            = a[(index +22) - 2]\n",
    "#             data_dict_sat_packets[data_dict_times[counter]]['Q(3)']                            = a[(index +23) - 2]\n",
    "#             data_dict_sat_packets[data_dict_times[counter]]['Q(4)']                            = a[(index +24) - 2]\n",
    "\n",
    "\n",
    "# data_record = pd.DataFrame({ 'MJDSEC ET'                                                   :  [],\n",
    "#                              #'Data Buffer Start Date & Time in form YYMMDDHHMMSS .0D0 UTC':  [],\n",
    "#                              #'Fractional seconds of Start Time UTC '                      :  [],\n",
    "#                              #'Data Buffer Start Date & Time in MJDSecs ET'                :  [],\n",
    "#                              #'NTB'                             :  [], # Number of trajectory times in this Data Buffer\n",
    "#                              'Satellite Inertial X coordinate' :  [],\n",
    "#                              'Satellite Inertial Y coordinate' :  [],\n",
    "#                              'Satellite Inertial Z coordinate' :  [],\n",
    "#                              'Satellite Inertial X velocity'   :  [],\n",
    "#                              'Satellite Inertial Y velocity'   :  [],\n",
    "#                              'Satellite Inertial Z velocity'   :  [],\n",
    "#                              'Satellite Geodetic Latitude'     :  [],\n",
    "#                              'Satellite East Longitude'        :  [],\n",
    "#                              'Satellite Height'                :  [],\n",
    "#                              'Satellite ECF X coordinate'      :  [],\n",
    "#                              'Satellite ECF Y coordinate'      :  [],\n",
    "#                              'Satellite ECF Z coordinate'      :  [],\n",
    "#                              'Satellite ECF X velocity'        :  [],\n",
    "#                              'Satellite ECF Y velocity'        :  [],\n",
    "#                              'Satellite ECF Z velocity'        :  [],\n",
    "#                              'Polar Motion X'                  :  [],\n",
    "#                              'Polar Motion Y'                  :  [],\n",
    "#                              'Beta prime angle'                :  [],\n",
    "#                              'Yaw angle'                       :  [],\n",
    "#                              'Orbit Angle'                     :  [],\n",
    "#                              'Q(1)'                            :  [],    #  Quaternions describing\n",
    "#                              'Q(2)'                            :  [],    #  the total rotation from\n",
    "#                              'Q(3)'                            :  [],   # ICRS(J200) to ITRF for\n",
    "#                              'Q(4)'                            :  [],    #  this time             \n",
    "#                             })\n",
    "\n",
    "\n",
    "# 1     Satellite Inertial X coordinate   (meters) \n",
    "# 2     Satellite Inertial X coordinate   (meters) \n",
    "# 3     Satellite Inertial Z coordinate   (meters) \n",
    "# 4     Satellite Inertial X velocity     (meters/second)\n",
    "# 5     Satellite Inertial Y velocity     (meters/second)\n",
    "# 6     Satellite Inertial Z velocity     (meters/second)\n",
    "# 7     Satellite Geodetic Latitude       (degrees)\n",
    "# 8     Satellite East Longitude          (degrees)\n",
    "# 9     Satellite Height                  (meters)\n",
    "# 10    Satellite ECF X coordinate        (meters)\n",
    "# 11    Satellite ECF Y coordinate        (meters)\n",
    "# 12    Satellite ECF Z coordinate        (meters)\n",
    "# 13    Satellite ECF X velocity          (meters/second)\n",
    "# 14    Satellite ECF Y velocity          (meters/second)\n",
    "# 15    Satellite ECF Z velocity          (meters/second)\n",
    "# 16    Polar Motion X                    (milliarcsec)\n",
    "# 17    Polar Motion Y                    (milliarcsec)\n",
    "# 18    Beta prime angle                  (degrees)\n",
    "# 19    Yaw angle                         (degrees)\n",
    "# 20    Orbit Angle                       (degrees)\n",
    "# 21    Q(1) -|  Quaternions describing \n",
    "# 22    Q(2)  |  the total rotation from \n",
    "# 23    Q(3)  |  ICRS(J200) to ITRF for\n",
    "# 24    Q(4) _|  this time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "26e02de3",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-27T20:24:32.764218Z",
     "start_time": "2021-05-27T20:24:32.761627Z"
    }
   },
   "outputs": [],
   "source": [
    "# get_last_packet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ffad9f4b",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-27T20:24:36.755944Z",
     "start_time": "2021-05-27T20:24:36.752564Z"
    }
   },
   "outputs": [],
   "source": [
    "# header_labels = [\n",
    "#     '-9 ,000 ,000 ,000.0D0',\n",
    "#     'Number of alphanumeric data buffers to follow .(NA)',\n",
    "#     'Number of card images in the GEODYN II input control deck (NC).',\n",
    "#     'Arc Number.',\n",
    "#     'Global Iteration Number',\n",
    "#     'Inner Iteration Number',\n",
    "#     'Number of satellites on this file (NSATS =1 or number of sats. in Set if Master and Slaves to be concurrently output .) This quantity has an upper limit of 50.',\n",
    "#     'Actual number of words per satellite per time point (NWDSAT <= 39)',\n",
    "#     'Number of words of data per time point (NWDATA=NSATS*NWDSAT )','\n",
    "#     'Number of time points per Data Buffer (NTIMBF ).',\n",
    "#     'Trajectory Start Date & Time in form YYMMDDHHMMSS .0D0 UTC \n",
    "#     'Fractional seconds of Start Time. UTC',\n",
    "#     'Trajectory Stop Date & Time in form YYMMDDHHMMSS .0D0 UTC ',\n",
    "#     'Fractional seconds of Stop Time. UTC',',\n",
    "#     'Trajectory Start Date & Time in Modified Julian Day Seconds (MJDS=(JD -2430000.5 D0 )*86400+ ISEC) ET',\n",
    "#     'Fractional seconds of Start Time',\n",
    "#     'Trajectory Stop Date & Time in Modified Julian Day Seconds (MJDS=(JD -2430000.5 D0 )*86400+ ISEC). ET',\n",
    "#     'Fractional seconds of Stop Time. ET',\n",
    "#     'Nominal interval between trajectory times in seconds. ET ',\n",
    "#     'Nominal number of trajectory times.',\n",
    "#     'zero',\n",
    "#     'Output S/C ephemeris reference system index (0 = TOD, 1 = TOR, 2 = Mean of J2000)',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'spare',\n",
    "#     'Speed of Light.',\n",
    "#     'GM for Earth.',\n",
    "#     'Semi -major axis of Earth reference ellipsoid.',\n",
    "#     'Equatorial Flattening of Earth reference ellipsoid.',\n",
    "#     'Gravitational Potential Checksum.',\n",
    "#     'Maximum Degree of Gravitational Expansion.',\n",
    "#     'Maximum Order of Gravitational Expansion.',    ### SKIP from 108 -200\n",
    "# ]\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1b65c092",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-27T20:24:44.061302Z",
     "start_time": "2021-05-27T20:24:44.058281Z"
    }
   },
   "outputs": [],
   "source": [
    "# print('Trajectory Start Date & Time in Modified Julian Day',a[14])\n",
    "\n",
    "# print('Nominal interval between trajectory times in seconds. ET',a[18])\n",
    "# print('Nominal number of trajectory times.',a[19])\n",
    "# print('zero', a[20])\n",
    "# print('Output S/C ephemeris reference system index (0 = TOD, 1 = TOR, 2 = Mean of J2000)', a[21])\n",
    "# print('spare', a[22])\n",
    "\n",
    "\n",
    "# print('speed of light', a[100])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bf80115b",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-27T20:24:51.405814Z",
     "start_time": "2021-05-27T20:24:51.399266Z"
    }
   },
   "outputs": [],
   "source": [
    "# f = FortranFile(__rvg_filename, 'r')\n",
    "\n",
    "# end_data_val = 9000000000 #-999.0\n",
    "# # end_datarecord = False\n",
    "# # counter = 0\n",
    "\n",
    "\n",
    "\n",
    "# ####   Loop through the binary file and save out each full record. \n",
    "# #      when we encounter the -999.0 delimeter at the start of the sentnial,\n",
    "# #      we have reached the end of the header record.\n",
    "# #\n",
    "# #      The data is saved into a DataFrame for \"simplicity\"\n",
    "\n",
    "\n",
    "# # while end_datarecord == False:\n",
    "\n",
    "# a = f.read_record(float)  # read the record with the required datatype\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e71cac94",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-05-27T20:24:58.844453Z",
     "start_time": "2021-05-27T20:24:58.838216Z"
    }
   },
   "outputs": [],
   "source": [
    "\n",
    "# if end_data_val in a:\n",
    "#     ####  If the the first index has -999.0 we are at the sentinel record \n",
    "#     #     which denotes the end of the data section.\n",
    "#     print(self.tabtab, '----- End of file')\n",
    "\n",
    "#     rvg_data['sentinel'] = dict(zip(sentinel_titles, a))    \n",
    "#     end_datarecord = True\n",
    "#     counter += 1\n",
    "#     f.close()  # be sure to close the file\n",
    "#     break  \n",
    "# else:\n",
    "#     if counter == 0:\n",
    "#         #### If the counter is 0 we are on the header record.\n",
    "#         #    this is simply because it is the first record. bottabing bottaboom\n",
    "#         rvg_data['header'] = dict(zip(header_titles, a))    \n",
    "#     else:\n",
    "#         #### Everything in the file that isn't header or senitinel is data\n",
    "#         rvg_data['data'].loc[counter-1] = dict(zip(data_titles,a) ) \n",
    "#     counter += 1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1db94888",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b3fb8e1f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "41092be3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
