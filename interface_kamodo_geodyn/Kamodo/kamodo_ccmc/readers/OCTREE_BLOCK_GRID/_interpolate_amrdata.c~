#define _CFFI_

/* We try to define Py_LIMITED_API before including Python.h.

   Mess: we can only define it if Py_DEBUG, Py_TRACE_REFS and
   Py_REF_DEBUG are not defined.  This is a best-effort approximation:
   we can learn about Py_DEBUG from pyconfig.h, but it is unclear if
   the same works for the other two macros.  Py_DEBUG implies them,
   but not the other way around.

   Issue #350 is still open: on Windows, the code here causes it to link
   with PYTHON36.DLL (for example) instead of PYTHON3.DLL.  A fix was
   attempted in 164e526a5515 and 14ce6985e1c3, but reverted: virtualenv
   does not make PYTHON3.DLL available, and so the "correctly" compiled
   version would not run inside a virtualenv.  We will re-apply the fix
   after virtualenv has been fixed for some time.  For explanation, see
   issue #355.  For a workaround if you want PYTHON3.DLL and don't worry
   about virtualenv, see issue #350.  See also 'py_limited_api' in
   setuptools_ext.py.
*/
#if !defined(_CFFI_USE_EMBEDDING) && !defined(Py_LIMITED_API)
#  include <pyconfig.h>
#  if !defined(Py_DEBUG) && !defined(Py_TRACE_REFS) && !defined(Py_REF_DEBUG)
#    define Py_LIMITED_API
#  endif
#endif

#include <Python.h>
#ifdef __cplusplus
extern "C" {
#endif
#include <stddef.h>

/* This part is from file 'cffi/parse_c_type.h'.  It is copied at the
   beginning of C sources generated by CFFI's ffi.set_source(). */

typedef void *_cffi_opcode_t;

#define _CFFI_OP(opcode, arg)   (_cffi_opcode_t)(opcode | (((uintptr_t)(arg)) << 8))
#define _CFFI_GETOP(cffi_opcode)    ((unsigned char)(uintptr_t)cffi_opcode)
#define _CFFI_GETARG(cffi_opcode)   (((intptr_t)cffi_opcode) >> 8)

#define _CFFI_OP_PRIMITIVE       1
#define _CFFI_OP_POINTER         3
#define _CFFI_OP_ARRAY           5
#define _CFFI_OP_OPEN_ARRAY      7
#define _CFFI_OP_STRUCT_UNION    9
#define _CFFI_OP_ENUM           11
#define _CFFI_OP_FUNCTION       13
#define _CFFI_OP_FUNCTION_END   15
#define _CFFI_OP_NOOP           17
#define _CFFI_OP_BITFIELD       19
#define _CFFI_OP_TYPENAME       21
#define _CFFI_OP_CPYTHON_BLTN_V 23   // varargs
#define _CFFI_OP_CPYTHON_BLTN_N 25   // noargs
#define _CFFI_OP_CPYTHON_BLTN_O 27   // O  (i.e. a single arg)
#define _CFFI_OP_CONSTANT       29
#define _CFFI_OP_CONSTANT_INT   31
#define _CFFI_OP_GLOBAL_VAR     33
#define _CFFI_OP_DLOPEN_FUNC    35
#define _CFFI_OP_DLOPEN_CONST   37
#define _CFFI_OP_GLOBAL_VAR_F   39
#define _CFFI_OP_EXTERN_PYTHON  41

#define _CFFI_PRIM_VOID          0
#define _CFFI_PRIM_BOOL          1
#define _CFFI_PRIM_CHAR          2
#define _CFFI_PRIM_SCHAR         3
#define _CFFI_PRIM_UCHAR         4
#define _CFFI_PRIM_SHORT         5
#define _CFFI_PRIM_USHORT        6
#define _CFFI_PRIM_INT           7
#define _CFFI_PRIM_UINT          8
#define _CFFI_PRIM_LONG          9
#define _CFFI_PRIM_ULONG        10
#define _CFFI_PRIM_LONGLONG     11
#define _CFFI_PRIM_ULONGLONG    12
#define _CFFI_PRIM_FLOAT        13
#define _CFFI_PRIM_DOUBLE       14
#define _CFFI_PRIM_LONGDOUBLE   15

#define _CFFI_PRIM_WCHAR        16
#define _CFFI_PRIM_INT8         17
#define _CFFI_PRIM_UINT8        18
#define _CFFI_PRIM_INT16        19
#define _CFFI_PRIM_UINT16       20
#define _CFFI_PRIM_INT32        21
#define _CFFI_PRIM_UINT32       22
#define _CFFI_PRIM_INT64        23
#define _CFFI_PRIM_UINT64       24
#define _CFFI_PRIM_INTPTR       25
#define _CFFI_PRIM_UINTPTR      26
#define _CFFI_PRIM_PTRDIFF      27
#define _CFFI_PRIM_SIZE         28
#define _CFFI_PRIM_SSIZE        29
#define _CFFI_PRIM_INT_LEAST8   30
#define _CFFI_PRIM_UINT_LEAST8  31
#define _CFFI_PRIM_INT_LEAST16  32
#define _CFFI_PRIM_UINT_LEAST16 33
#define _CFFI_PRIM_INT_LEAST32  34
#define _CFFI_PRIM_UINT_LEAST32 35
#define _CFFI_PRIM_INT_LEAST64  36
#define _CFFI_PRIM_UINT_LEAST64 37
#define _CFFI_PRIM_INT_FAST8    38
#define _CFFI_PRIM_UINT_FAST8   39
#define _CFFI_PRIM_INT_FAST16   40
#define _CFFI_PRIM_UINT_FAST16  41
#define _CFFI_PRIM_INT_FAST32   42
#define _CFFI_PRIM_UINT_FAST32  43
#define _CFFI_PRIM_INT_FAST64   44
#define _CFFI_PRIM_UINT_FAST64  45
#define _CFFI_PRIM_INTMAX       46
#define _CFFI_PRIM_UINTMAX      47
#define _CFFI_PRIM_FLOATCOMPLEX 48
#define _CFFI_PRIM_DOUBLECOMPLEX 49
#define _CFFI_PRIM_CHAR16       50
#define _CFFI_PRIM_CHAR32       51

#define _CFFI__NUM_PRIM         52
#define _CFFI__UNKNOWN_PRIM           (-1)
#define _CFFI__UNKNOWN_FLOAT_PRIM     (-2)
#define _CFFI__UNKNOWN_LONG_DOUBLE    (-3)

#define _CFFI__IO_FILE_STRUCT         (-1)


struct _cffi_global_s {
    const char *name;
    void *address;
    _cffi_opcode_t type_op;
    void *size_or_direct_fn;  // OP_GLOBAL_VAR: size, or 0 if unknown
                              // OP_CPYTHON_BLTN_*: addr of direct function
};

struct _cffi_getconst_s {
    unsigned long long value;
    const struct _cffi_type_context_s *ctx;
    int gindex;
};

struct _cffi_struct_union_s {
    const char *name;
    int type_index;          // -> _cffi_types, on a OP_STRUCT_UNION
    int flags;               // _CFFI_F_* flags below
    size_t size;
    int alignment;
    int first_field_index;   // -> _cffi_fields array
    int num_fields;
};
#define _CFFI_F_UNION         0x01   // is a union, not a struct
#define _CFFI_F_CHECK_FIELDS  0x02   // complain if fields are not in the
                                     // "standard layout" or if some are missing
#define _CFFI_F_PACKED        0x04   // for CHECK_FIELDS, assume a packed struct
#define _CFFI_F_EXTERNAL      0x08   // in some other ffi.include()
#define _CFFI_F_OPAQUE        0x10   // opaque

struct _cffi_field_s {
    const char *name;
    size_t field_offset;
    size_t field_size;
    _cffi_opcode_t field_type_op;
};

struct _cffi_enum_s {
    const char *name;
    int type_index;          // -> _cffi_types, on a OP_ENUM
    int type_prim;           // _CFFI_PRIM_xxx
    const char *enumerators; // comma-delimited string
};

struct _cffi_typename_s {
    const char *name;
    int type_index;   /* if opaque, points to a possibly artificial
                         OP_STRUCT which is itself opaque */
};

struct _cffi_type_context_s {
    _cffi_opcode_t *types;
    const struct _cffi_global_s *globals;
    const struct _cffi_field_s *fields;
    const struct _cffi_struct_union_s *struct_unions;
    const struct _cffi_enum_s *enums;
    const struct _cffi_typename_s *typenames;
    int num_globals;
    int num_struct_unions;
    int num_enums;
    int num_typenames;
    const char *const *includes;
    int num_types;
    int flags;      /* future extension */
};

struct _cffi_parse_info_s {
    const struct _cffi_type_context_s *ctx;
    _cffi_opcode_t *output;
    unsigned int output_size;
    size_t error_location;
    const char *error_message;
};

struct _cffi_externpy_s {
    const char *name;
    size_t size_of_result;
    void *reserved1, *reserved2;
};

#ifdef _CFFI_INTERNAL
static int parse_c_type(struct _cffi_parse_info_s *info, const char *input);
static int search_in_globals(const struct _cffi_type_context_s *ctx,
                             const char *search, size_t search_len);
static int search_in_struct_unions(const struct _cffi_type_context_s *ctx,
                                   const char *search, size_t search_len);
#endif

/* this block of #ifs should be kept exactly identical between
   c/_cffi_backend.c, cffi/vengine_cpy.py, cffi/vengine_gen.py
   and cffi/_cffi_include.h */
#if defined(_MSC_VER)
# include <malloc.h>   /* for alloca() */
# if _MSC_VER < 1600   /* MSVC < 2010 */
   typedef __int8 int8_t;
   typedef __int16 int16_t;
   typedef __int32 int32_t;
   typedef __int64 int64_t;
   typedef unsigned __int8 uint8_t;
   typedef unsigned __int16 uint16_t;
   typedef unsigned __int32 uint32_t;
   typedef unsigned __int64 uint64_t;
   typedef __int8 int_least8_t;
   typedef __int16 int_least16_t;
   typedef __int32 int_least32_t;
   typedef __int64 int_least64_t;
   typedef unsigned __int8 uint_least8_t;
   typedef unsigned __int16 uint_least16_t;
   typedef unsigned __int32 uint_least32_t;
   typedef unsigned __int64 uint_least64_t;
   typedef __int8 int_fast8_t;
   typedef __int16 int_fast16_t;
   typedef __int32 int_fast32_t;
   typedef __int64 int_fast64_t;
   typedef unsigned __int8 uint_fast8_t;
   typedef unsigned __int16 uint_fast16_t;
   typedef unsigned __int32 uint_fast32_t;
   typedef unsigned __int64 uint_fast64_t;
   typedef __int64 intmax_t;
   typedef unsigned __int64 uintmax_t;
# else
#  include <stdint.h>
# endif
# if _MSC_VER < 1800   /* MSVC < 2013 */
#  ifndef __cplusplus
    typedef unsigned char _Bool;
#  endif
# endif
#else
# include <stdint.h>
# if (defined (__SVR4) && defined (__sun)) || defined(_AIX) || defined(__hpux)
#  include <alloca.h>
# endif
#endif

#ifdef __GNUC__
# define _CFFI_UNUSED_FN  __attribute__((unused))
#else
# define _CFFI_UNUSED_FN  /* nothing */
#endif

#ifdef __cplusplus
# ifndef _Bool
   typedef bool _Bool;   /* semi-hackish: C++ has no _Bool; bool is builtin */
# endif
#endif

/**********  CPython-specific section  **********/
#ifndef PYPY_VERSION


#if PY_MAJOR_VERSION >= 3
# define PyInt_FromLong PyLong_FromLong
#endif

#define _cffi_from_c_double PyFloat_FromDouble
#define _cffi_from_c_float PyFloat_FromDouble
#define _cffi_from_c_long PyInt_FromLong
#define _cffi_from_c_ulong PyLong_FromUnsignedLong
#define _cffi_from_c_longlong PyLong_FromLongLong
#define _cffi_from_c_ulonglong PyLong_FromUnsignedLongLong
#define _cffi_from_c__Bool PyBool_FromLong

#define _cffi_to_c_double PyFloat_AsDouble
#define _cffi_to_c_float PyFloat_AsDouble

#define _cffi_from_c_int(x, type)                                        \
    (((type)-1) > 0 ? /* unsigned */                                     \
        (sizeof(type) < sizeof(long) ?                                   \
            PyInt_FromLong((long)x) :                                    \
         sizeof(type) == sizeof(long) ?                                  \
            PyLong_FromUnsignedLong((unsigned long)x) :                  \
            PyLong_FromUnsignedLongLong((unsigned long long)x)) :        \
        (sizeof(type) <= sizeof(long) ?                                  \
            PyInt_FromLong((long)x) :                                    \
            PyLong_FromLongLong((long long)x)))

#define _cffi_to_c_int(o, type)                                          \
    ((type)(                                                             \
     sizeof(type) == 1 ? (((type)-1) > 0 ? (type)_cffi_to_c_u8(o)        \
                                         : (type)_cffi_to_c_i8(o)) :     \
     sizeof(type) == 2 ? (((type)-1) > 0 ? (type)_cffi_to_c_u16(o)       \
                                         : (type)_cffi_to_c_i16(o)) :    \
     sizeof(type) == 4 ? (((type)-1) > 0 ? (type)_cffi_to_c_u32(o)       \
                                         : (type)_cffi_to_c_i32(o)) :    \
     sizeof(type) == 8 ? (((type)-1) > 0 ? (type)_cffi_to_c_u64(o)       \
                                         : (type)_cffi_to_c_i64(o)) :    \
     (Py_FatalError("unsupported size for type " #type), (type)0)))

#define _cffi_to_c_i8                                                    \
                 ((int(*)(PyObject *))_cffi_exports[1])
#define _cffi_to_c_u8                                                    \
                 ((int(*)(PyObject *))_cffi_exports[2])
#define _cffi_to_c_i16                                                   \
                 ((int(*)(PyObject *))_cffi_exports[3])
#define _cffi_to_c_u16                                                   \
                 ((int(*)(PyObject *))_cffi_exports[4])
#define _cffi_to_c_i32                                                   \
                 ((int(*)(PyObject *))_cffi_exports[5])
#define _cffi_to_c_u32                                                   \
                 ((unsigned int(*)(PyObject *))_cffi_exports[6])
#define _cffi_to_c_i64                                                   \
                 ((long long(*)(PyObject *))_cffi_exports[7])
#define _cffi_to_c_u64                                                   \
                 ((unsigned long long(*)(PyObject *))_cffi_exports[8])
#define _cffi_to_c_char                                                  \
                 ((int(*)(PyObject *))_cffi_exports[9])
#define _cffi_from_c_pointer                                             \
    ((PyObject *(*)(char *, struct _cffi_ctypedescr *))_cffi_exports[10])
#define _cffi_to_c_pointer                                               \
    ((char *(*)(PyObject *, struct _cffi_ctypedescr *))_cffi_exports[11])
#define _cffi_get_struct_layout                                          \
    not used any more
#define _cffi_restore_errno                                              \
    ((void(*)(void))_cffi_exports[13])
#define _cffi_save_errno                                                 \
    ((void(*)(void))_cffi_exports[14])
#define _cffi_from_c_char                                                \
    ((PyObject *(*)(char))_cffi_exports[15])
#define _cffi_from_c_deref                                               \
    ((PyObject *(*)(char *, struct _cffi_ctypedescr *))_cffi_exports[16])
#define _cffi_to_c                                                       \
    ((int(*)(char *, struct _cffi_ctypedescr *, PyObject *))_cffi_exports[17])
#define _cffi_from_c_struct                                              \
    ((PyObject *(*)(char *, struct _cffi_ctypedescr *))_cffi_exports[18])
#define _cffi_to_c_wchar_t                                               \
    ((_cffi_wchar_t(*)(PyObject *))_cffi_exports[19])
#define _cffi_from_c_wchar_t                                             \
    ((PyObject *(*)(_cffi_wchar_t))_cffi_exports[20])
#define _cffi_to_c_long_double                                           \
    ((long double(*)(PyObject *))_cffi_exports[21])
#define _cffi_to_c__Bool                                                 \
    ((_Bool(*)(PyObject *))_cffi_exports[22])
#define _cffi_prepare_pointer_call_argument                              \
    ((Py_ssize_t(*)(struct _cffi_ctypedescr *,                           \
                    PyObject *, char **))_cffi_exports[23])
#define _cffi_convert_array_from_object                                  \
    ((int(*)(char *, struct _cffi_ctypedescr *, PyObject *))_cffi_exports[24])
#define _CFFI_CPIDX  25
#define _cffi_call_python                                                \
    ((void(*)(struct _cffi_externpy_s *, char *))_cffi_exports[_CFFI_CPIDX])
#define _cffi_to_c_wchar3216_t                                           \
    ((int(*)(PyObject *))_cffi_exports[26])
#define _cffi_from_c_wchar3216_t                                         \
    ((PyObject *(*)(int))_cffi_exports[27])
#define _CFFI_NUM_EXPORTS 28

struct _cffi_ctypedescr;

static void *_cffi_exports[_CFFI_NUM_EXPORTS];

#define _cffi_type(index)   (                           \
    assert((((uintptr_t)_cffi_types[index]) & 1) == 0), \
    (struct _cffi_ctypedescr *)_cffi_types[index])

static PyObject *_cffi_init(const char *module_name, Py_ssize_t version,
                            const struct _cffi_type_context_s *ctx)
{
    PyObject *module, *o_arg, *new_module;
    void *raw[] = {
        (void *)module_name,
        (void *)version,
        (void *)_cffi_exports,
        (void *)ctx,
    };

    module = PyImport_ImportModule("_cffi_backend");
    if (module == NULL)
        goto failure;

    o_arg = PyLong_FromVoidPtr((void *)raw);
    if (o_arg == NULL)
        goto failure;

    new_module = PyObject_CallMethod(
        module, (char *)"_init_cffi_1_0_external_module", (char *)"O", o_arg);

    Py_DECREF(o_arg);
    Py_DECREF(module);
    return new_module;

  failure:
    Py_XDECREF(module);
    return NULL;
}


#ifdef HAVE_WCHAR_H
typedef wchar_t _cffi_wchar_t;
#else
typedef uint16_t _cffi_wchar_t;   /* same random pick as _cffi_backend.c */
#endif

_CFFI_UNUSED_FN static uint16_t _cffi_to_c_char16_t(PyObject *o)
{
    if (sizeof(_cffi_wchar_t) == 2)
        return (uint16_t)_cffi_to_c_wchar_t(o);
    else
        return (uint16_t)_cffi_to_c_wchar3216_t(o);
}

_CFFI_UNUSED_FN static PyObject *_cffi_from_c_char16_t(uint16_t x)
{
    if (sizeof(_cffi_wchar_t) == 2)
        return _cffi_from_c_wchar_t((_cffi_wchar_t)x);
    else
        return _cffi_from_c_wchar3216_t((int)x);
}

_CFFI_UNUSED_FN static int _cffi_to_c_char32_t(PyObject *o)
{
    if (sizeof(_cffi_wchar_t) == 4)
        return (int)_cffi_to_c_wchar_t(o);
    else
        return (int)_cffi_to_c_wchar3216_t(o);
}

_CFFI_UNUSED_FN static PyObject *_cffi_from_c_char32_t(int x)
{
    if (sizeof(_cffi_wchar_t) == 4)
        return _cffi_from_c_wchar_t((_cffi_wchar_t)x);
    else
        return _cffi_from_c_wchar3216_t(x);
}


/**********  end CPython-specific section  **********/
#else
_CFFI_UNUSED_FN
static void (*_cffi_call_python_org)(struct _cffi_externpy_s *, char *);
# define _cffi_call_python  _cffi_call_python_org
#endif


#define _cffi_array_len(array)   (sizeof(array) / sizeof((array)[0]))

#define _cffi_prim_int(size, sign)                                      \
    ((size) == 1 ? ((sign) ? _CFFI_PRIM_INT8  : _CFFI_PRIM_UINT8)  :    \
     (size) == 2 ? ((sign) ? _CFFI_PRIM_INT16 : _CFFI_PRIM_UINT16) :    \
     (size) == 4 ? ((sign) ? _CFFI_PRIM_INT32 : _CFFI_PRIM_UINT32) :    \
     (size) == 8 ? ((sign) ? _CFFI_PRIM_INT64 : _CFFI_PRIM_UINT64) :    \
     _CFFI__UNKNOWN_PRIM)

#define _cffi_prim_float(size)                                          \
    ((size) == sizeof(float) ? _CFFI_PRIM_FLOAT :                       \
     (size) == sizeof(double) ? _CFFI_PRIM_DOUBLE :                     \
     (size) == sizeof(long double) ? _CFFI__UNKNOWN_LONG_DOUBLE :       \
     _CFFI__UNKNOWN_FLOAT_PRIM)

#define _cffi_check_int(got, got_nonpos, expected)      \
    ((got_nonpos) == (expected <= 0) &&                 \
     (got) == (unsigned long long)expected)

#ifdef MS_WIN32
# define _cffi_stdcall  __stdcall
#else
# define _cffi_stdcall  /* nothing */
#endif

#ifdef __cplusplus
}
#endif

/************************************************************/


    #include "fl.h"
    #include "octree_block.h"
    int x_ranges(int N, float *x, float *XR_BLK,int positions_in_cell_center)
    {
      int ib,ix=0,NV;
      if (x == NULL){return -2;}
      if (XR_BLK == NULL){return -1;}
      NX=0;
      while (ix<N && NX==0){
        if (x[0] == x[ix]){
	  NX=ix;
	}
        ix++;
      }
      if (NX == 0){return(-4);}
      N_blks=N/NX;
      NY=NX; // this should work in (nearly) 
      NZ=NX; // all cases at the CCMC
      NV=NX*NY*NZ;
      float dx_cell_max=0.,dx_cell_min=1e10;
      for (ib=0;ib<N_blks;ib++){
        float dx_cell;
        dx_cell=x[NV*ib+1]-x[NV*ib];
        XR_BLK[2*ib]=x[NV*ib]-positions_in_cell_center*0.5*dx_cell-TOLERANCE;
        XR_BLK[2*ib+1]=x[NV*ib+NX-1]+positions_in_cell_center*0.5*dx_cell-TOLERANCE;
        if (dx_cell_max < dx_cell){dx_cell_max=dx_cell;}
        if (dx_cell_min > dx_cell){dx_cell_min=dx_cell;}
      }
      fprintf(stderr,"Number of blocks: %i  min(dx_cell): %f  max(dx_cell): %f\n",N_blks, dx_cell_min,dx_cell_max);
      return(0);
    }

    int octree_blocklist_init(octree_block *octree_blocklist,
//                                float *x, float *y, float *z, int N, int postions_centered)
                              float *XMIN, float *XMAX, float *XCenter, 
                              float *YMIN, float *YMAX, float *YCenter, 
                              float *ZMIN, float *ZMAX, float *ZCenter, 
                              int arrlen)
    {
             NX=-1;
      NY=-1;
      NZ=-1;
      N_blks=-1;
      ix=1;
      iy=1;
      iz=1;
      while (NX == -1 && ix < N){
	if (x[0] == x[ix]){
	  NX=ix;
	}
	ix++;
      }
      if (NX == -1) return(-1);   // x are all unique
      while (NY == -1 && iy < N){
	if (y[0] == y[NX*ix]){
	  NY=iy; // found repetition 
	}
	iy++;
      }
      if (NY == -1) return(-2);   // y are all unique
      long* where_z_eq_z0=(long*)malloc(N*sizeof(long));
      long N_z_eq_z0=0;
      for (iz=0;iz<N;iz++){
	if (z[0] == z[iz]){
	  where_z_eq_z[N_z_eq_z0]=iz;
	  N_z_eq_z0++;
	}
      }
      if (N_z_eq_z0==0){
	NZ=1;
      } else {
	nz=N;
	for (iz=1;iz<N_z_eq_z0;iz++){
	  if ( (where_z_eq_z[iz]-where_z_eq_z[iz-1]) < NZ){
	    NZ=where_z_eq_z[iz]-where_z_eq_z[iz-1];
	  }
	}
      }
      N_blks = N/(NX*NY*NZ);
      if ((N_blks*NX*NY*NZ) != N){
	fprintf(STDERR,'Error: number N not multiple of block size! N=%i NX=%i NY=%i NZ=%i',N,nx,ny,nz);
	return(-4);
      }
      xr_blk=(float*)malloc(2*N_blks);
      yr_blk=(float*)malloc(2*N_blks);
      zr_blk=(float*)malloc(2*N_blks);
      for (int ib=0;ib<N_blks;ib++){
	float dx_blk=x[NX*ib+1]-x[NX*ib];
	xr_blk[2*ib]=x[NX*ib]-positions_in_cell_center*0.5*dx_blk-TOLERANCE;
	xr_blk[2*ib+1]=x[NX*ib+NX-1]+positions_in_cell_center*0.5*dx_blk-TOLERANCE;
      }
      for (int NV=NX*NY,ib=0;ib<N_blks;ib++){
	float dy_blk=y[NV*ib+1]-y[NX*NY*ib];
	xr_blk[2*ib]=x[NV*ib]-positions_in_cell_center*0.5*dy_blk-TOLERANCE;
	xr_blk[2*ib+1]=x[NX*ib+NX-1]+positions_in_cell_center*0.5*dx_blk-TOLERANCE;
      }
      for (int ib=0;ib<N_blks;ib++){
	float dx_blk=x[NX*ib+1]-x[NX*ib];
	xr_blk[2*ib]=x[NX*ib]-positions_in_cell_center*0.5*dx_blk-TOLERANCE;
	xr_blk[2*ib+1]=x[NX*ib+NX-1]+positions_in_cell_center*0.5*dx_blk-TOLERANCE;
      }
      dxmin=1e10;
      for (ix=0;ix<N_blk;ix++){
	float dx;
	dx=xr_blk[1+2*ix]-xr_blk[2*ix];
	if (dx < dxmin){dxmin=dx;}
      }
     

       octree_block block;
       for (int i=0;i<arrlen;i++){
         block=octree_blocklist[i];
         block.XMIN=XMIN[i];
         block.XMAX=XMIN[i];
         block.YMIN=YMIN[i];
         block.YMAX=YMIN[i];
         block.ZMIN=ZMIN[i];
         block.ZMAX=ZMIN[i];
         block.XCenter=XCenter[i];
         block.YCenter=YCenter[i];
         block.ZCenter=ZCenter[i];
         block.child_count=0;
         block.refinement_level=-1;
         block.parent_ID=-1;
         for (int j=0;j<8;j++){block.child_IDs[j]=-1;}
       }
    }


/************************************************************/

static void *_cffi_types[] = {
/*  0 */ _CFFI_OP(_CFFI_OP_FUNCTION, 4), // long()(float, float, float, long, long)
/*  1 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13), // float
/*  2 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/*  3 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13),
/*  4 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 9), // long
/*  5 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 9),
/*  6 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/*  7 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7), // int
/*  8 */ _CFFI_OP(_CFFI_OP_ARRAY, 7), // int[8]
/*  9 */ (_cffi_opcode_t)(8),
/* 10 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 0), // octree_block
};

_CFFI_UNUSED_FN
static void _cffi_checkfld_typedef_octree_block(octree_block *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  (void)((p->refinement_level) | 0);  /* check that 'octree_block.refinement_level' is an integer */
  (void)((p->parent_ID) | 0);  /* check that 'octree_block.parent_ID' is an integer */
  (void)((p->child_count) | 0);  /* check that 'octree_block.child_count' is an integer */
  { int(*tmp)[8] = &p->child_IDs; (void)tmp; }
  { float *tmp = &p->XMIN; (void)tmp; }
  { float *tmp = &p->XMAX; (void)tmp; }
  { float *tmp = &p->XCenter; (void)tmp; }
  { float *tmp = &p->YMIN; (void)tmp; }
  { float *tmp = &p->YMAX; (void)tmp; }
  { float *tmp = &p->YCenter; (void)tmp; }
  { float *tmp = &p->ZMIN; (void)tmp; }
  { float *tmp = &p->ZMAX; (void)tmp; }
  { float *tmp = &p->ZCenter; (void)tmp; }
}
struct _cffi_align_typedef_octree_block { char x; octree_block y; };

static long _cffi_d_find_octree_block(float x0, float x1, float x2, long x3, long x4)
{
  return find_octree_block(x0, x1, x2, x3, x4);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_find_octree_block(PyObject *self, PyObject *args)
{
  float x0;
  float x1;
  float x2;
  long x3;
  long x4;
  long result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;

  if (!PyArg_UnpackTuple(args, "find_octree_block", 5, 5, &arg0, &arg1, &arg2, &arg3, &arg4))
    return NULL;

  x0 = (float)_cffi_to_c_float(arg0);
  if (x0 == (float)-1 && PyErr_Occurred())
    return NULL;

  x1 = (float)_cffi_to_c_float(arg1);
  if (x1 == (float)-1 && PyErr_Occurred())
    return NULL;

  x2 = (float)_cffi_to_c_float(arg2);
  if (x2 == (float)-1 && PyErr_Occurred())
    return NULL;

  x3 = _cffi_to_c_int(arg3, long);
  if (x3 == (long)-1 && PyErr_Occurred())
    return NULL;

  x4 = _cffi_to_c_int(arg4, long);
  if (x4 == (long)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = find_octree_block(x0, x1, x2, x3, x4); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, long);
}
#else
#  define _cffi_f_find_octree_block _cffi_d_find_octree_block
#endif

static const struct _cffi_global_s _cffi_globals[] = {
  { "find_octree_block", (void *)_cffi_f_find_octree_block, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 0), (void *)_cffi_d_find_octree_block },
};

static const struct _cffi_field_s _cffi_fields[] = {
  { "refinement_level", offsetof(octree_block, refinement_level),
                        sizeof(((octree_block *)0)->refinement_level),
                        _CFFI_OP(_CFFI_OP_NOOP, 7) },
  { "parent_ID", offsetof(octree_block, parent_ID),
                 sizeof(((octree_block *)0)->parent_ID),
                 _CFFI_OP(_CFFI_OP_NOOP, 7) },
  { "child_count", offsetof(octree_block, child_count),
                   sizeof(((octree_block *)0)->child_count),
                   _CFFI_OP(_CFFI_OP_NOOP, 7) },
  { "child_IDs", offsetof(octree_block, child_IDs),
                 sizeof(((octree_block *)0)->child_IDs),
                 _CFFI_OP(_CFFI_OP_NOOP, 8) },
  { "XMIN", offsetof(octree_block, XMIN),
            sizeof(((octree_block *)0)->XMIN),
            _CFFI_OP(_CFFI_OP_NOOP, 1) },
  { "XMAX", offsetof(octree_block, XMAX),
            sizeof(((octree_block *)0)->XMAX),
            _CFFI_OP(_CFFI_OP_NOOP, 1) },
  { "XCenter", offsetof(octree_block, XCenter),
               sizeof(((octree_block *)0)->XCenter),
               _CFFI_OP(_CFFI_OP_NOOP, 1) },
  { "YMIN", offsetof(octree_block, YMIN),
            sizeof(((octree_block *)0)->YMIN),
            _CFFI_OP(_CFFI_OP_NOOP, 1) },
  { "YMAX", offsetof(octree_block, YMAX),
            sizeof(((octree_block *)0)->YMAX),
            _CFFI_OP(_CFFI_OP_NOOP, 1) },
  { "YCenter", offsetof(octree_block, YCenter),
               sizeof(((octree_block *)0)->YCenter),
               _CFFI_OP(_CFFI_OP_NOOP, 1) },
  { "ZMIN", offsetof(octree_block, ZMIN),
            sizeof(((octree_block *)0)->ZMIN),
            _CFFI_OP(_CFFI_OP_NOOP, 1) },
  { "ZMAX", offsetof(octree_block, ZMAX),
            sizeof(((octree_block *)0)->ZMAX),
            _CFFI_OP(_CFFI_OP_NOOP, 1) },
  { "ZCenter", offsetof(octree_block, ZCenter),
               sizeof(((octree_block *)0)->ZCenter),
               _CFFI_OP(_CFFI_OP_NOOP, 1) },
};

static const struct _cffi_struct_union_s _cffi_struct_unions[] = {
  { "$octree_block", 10, _CFFI_F_CHECK_FIELDS,
    sizeof(octree_block), offsetof(struct _cffi_align_typedef_octree_block, y), 0, 13 },
};

static const struct _cffi_typename_s _cffi_typenames[] = {
  { "octree_block", 10 },
};

static const struct _cffi_type_context_s _cffi_type_context = {
  _cffi_types,
  _cffi_globals,
  _cffi_fields,
  _cffi_struct_unions,
  NULL,  /* no enums */
  _cffi_typenames,
  1,  /* num_globals */
  1,  /* num_struct_unions */
  0,  /* num_enums */
  1,  /* num_typenames */
  NULL,  /* no includes */
  11,  /* num_types */
  0,  /* flags */
};

#ifdef __GNUC__
#  pragma GCC visibility push(default)  /* for -fvisibility= */
#endif

#ifdef PYPY_VERSION
PyMODINIT_FUNC
_cffi_pypyinit__interpolate_amrdata(const void *p[])
{
    p[0] = (const void *)0x2601;
    p[1] = &_cffi_type_context;
#if PY_MAJOR_VERSION >= 3
    return NULL;
#endif
}
#  ifdef _MSC_VER
     PyMODINIT_FUNC
#  if PY_MAJOR_VERSION >= 3
     PyInit__interpolate_amrdata(void) { return NULL; }
#  else
     init_interpolate_amrdata(void) { }
#  endif
#  endif
#elif PY_MAJOR_VERSION >= 3
PyMODINIT_FUNC
PyInit__interpolate_amrdata(void)
{
  return _cffi_init("_interpolate_amrdata", 0x2601, &_cffi_type_context);
}
#else
PyMODINIT_FUNC
init_interpolate_amrdata(void)
{
  _cffi_init("_interpolate_amrdata", 0x2601, &_cffi_type_context);
}
#endif

#ifdef __GNUC__
#  pragma GCC visibility pop
#endif
